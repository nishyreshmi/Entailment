 #extracting subject, verb and object of a sentence from triplets output....
#result....67.89%......

from __future__ import division
import nltk
from nltk.parse.stanford import StanfordDependencyParser
from nltk.parse.stanford import StanfordParser
from nltk.tokenize import sent_tokenize,word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk import pos_tag
from nltk.corpus import wordnet as wn
##from nltk.corpus import wordnet as wn
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import wordnet_ic

brown_ic = wordnet_ic.ic('ic-brown.dat')
import os
from nltk.tree import Tree
from nltk.stem import PorterStemmer
import csv
#os.environ["CLASSPATH"]="/home/user/stanford-parser-full-2015-12-09/stanford-parser.jar/"
#os.environ["CLASSPATH"]="/home/user/stanford-parser-full-2015-12-09/stanford-parser-3.6.0-models.jar/"
import math
import numpy as np
from numpy import linalg as LA
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import string
import inflect
import re

##import xlwt 
##from xlwt import Workbook
lmtzr = WordNetLemmatizer()
ps = PorterStemmer()

pos1=['NNS','VBP']
pos2=['VBD','VBG','VBZ','VBD','VBN','PRP$']

#---------to extract sentences from SNLI to list.....
def extract_text():
    with open("snli_1.0_dev.txt","r") as data:
        train = csv.DictReader(data, delimiter='\t')
        evi_sentences = []
        hyp_sentences = []
        labels = []
        #scores = []
        for row in train:
            hyp_sentences.append(row["sentence1"])
            evi_sentences.append(row["sentence2"])
            labels.append(row["gold_label"])
    return hyp_sentences, evi_sentences, labels

hyp, evi, lab = extract_text()

#...adding no for incorrect n no labels....

lab_correct=[]
cor="yes"
not_cor="no"

##incor_sent=[140, 177, 402, 636, 874]
avoid=[21,47,128,165,184,188,196,250,265,274,286,331,369,441,481,
       771,842,1055,1087,1107,1113,1213,1568,2042,2222,2514,2532,
       2717,2857,2989,3009,3046,3643,3877,
       4025,4200,4207,4732,4967,5037,5049,5628,5723,5801,5805,5864,
       5877,6288,6617,6670,7006,7113,7309,7427,7559,7586,7629,7675,
       7718,7941,8010,8812,8838,9993]
cc_avoid=[28,29,52,183,674,1024,1064,1103,1631,1700,2098,2160,
          2186,2352,2374,2706,2812,2982,3035,3053,3075,4022,4030,
          4062,4380,4404,4717,4990,5024,5175,5421,5436,5662,5720,
          5769,5792,5973,6467,6513,6520,6524,6560,6622,6725,6732,
          7628,7735,7894,7919,8194,8500,8538,8590,8612,8705,9047,
          9101,9167,9233,9336,9681,9686,9725,9824,]
ee_avoid=[30,62,70,132,182,191,192,222,235,366,389,416,438,480,508,
          574,681,689690,737,759,772,780,837,853,875,918,919,973,
          982,991,1028,1045,1129,1210,1262,1288,1437,1487,1490,
          1502,1504,1517,1579,1597,1625,1626,1628,1676,1711,1739,
          1768,1807,1888,1917,1963,1973,1985,2005,2035,2040,2058,
          2071,2075,2157,2184,2195,2198,2221,2231,2241,2244,2247,
          2382,2443,2449,2479,2493,2565,2568, 2571,2573,2581,2589,
          2642,2644,2710,2724,2765,2821,2824,2836,2846,2852,2861,
          2867,2893,2906,2932,2959,3049,3077,3087,3116,3120,3141,
          3146,3160,3182,3192,3202,3206,3213,3264,3265,3307,3316,
          3385,3393,3416,3429,3434,3450,3459,3478,3482,3491,3505,
          3518,3536,3554,3564,3568,3574,3631,3642,3654,3671,3685,
          3692,3696,3710,3720,3732,3734,3743,3752,3792,3799,3805,
          3809,3868,3869,3881,3948,3960,3982,4002,4069,4073,4080,
          4114,4138,4145,4189,4205,4220,4225,4245,4259,4266,4280,
          4290,4319,4324,4350,4357,4368,4370,4374,4381,4394,4406,
          4469,4503,4527,4533,4545,4548,4657,4669,4722,4747,4765,
          4785,4832,4838,4867,4883,4884,4905,4923,4924,4944,4965,
          4978,4984,4987,4993,5011,5014,5032,5050,5069,5108,5114,
          5137,5153,5178,5185,5192,5225,5229,5231,5258,5267,5284,
          5311,5314,5334,5351,5382,5383,5390,5393,5413,5428,5435,
          5457,5461,5465,5474,5476,5481,5497,5554,5572,5579,5582,
          5585,5590,5593,5596,5599,5635,5650,5652,5659,5666,5667,
          5673,5739,5747,5762,5767,5847,5899,5919,5920,5925,5942,
          5953,5960,5970,5972,5990,5995,5997,5999,6068,6089,6090,
          6103,6109,6116,6118,6135,6145,6149,6155,6158,6173,6175,
          6194,6207,6210,6211,6222,6229,6259,6267,6307,6313,6328,
          6395,6396,6432,6440,6465,6474,6475,6479,6488,6517,6536,
          6587,4801,6802,6805,6860,6889,6898,6964,7030,7034,7042,
          7059,7079,7109,7115,7159,7174,7220,7235,7248,7260,7266,
          7291,7320,7390,7409,7435,7458,7496,7526,7536,7546,7550,
          7578,7594,7631,7641,7680,7729,7783,7810,7835,7838,7863,
          7870,7875,7878,7881,7882,7905,7911,7949,7977,7987,7996,
          8011,8020,8023,8072,8079,8136,8139,8150,8167,8188,8191,
          8195,8208,8213,8215,8275,8285,8310,8313,8318,8339,8353,
          8416,8426, 8447,8496,8539,8540,8581,8622,8662,8711,8725,
          8747,8753,8757,8791,8802,8939,8956,8998,9020,9023,9053,
          9085,9203,9216,9218,9273,9275,9279,9343,9410,9423,
          9485,9514,9515,9521,9575,9586,9587,9610,9638,9645,
          9672,9678,9708,9710,9737,9744,9766,9788,9789,9833,9872,
          9923,9942,9979]
          #9020,9023,9053,
##          9085,9200,9210,9213,9215,9257,9259,9263,9313,9373,9384,
##          9437,9462,9463,9466,9512,9523,9524,9544,95669573,9593,
##          9599,9623,9625,9646,9652,9673,9694,9695,9730,9764,9811,
##          9828,9864]
pars_incor=[115,250,300,318,354,418,453,490,491,503,585,616,622,
            666,693,898,1011,1134,1145,1150,1168,1181,1226,1306,
            1372,1465,1549,1550,1551,1689,1705,1733,
            1778,1781,1811,1852,1924,1926,2012,2152,2167,2170,2217,
            2276,2253,
            2277,2514,2532,2554,2580,2694,2761,2790,2803,2855,2865,2897,2985,3095,3111,3200,3201,3268,3271,3423,
            3572,3628,3630,3723,4137,4190,4251,4270,4341,4390,4456,4604,4767,4793,4900,4999,
            5067,5072,5121,5128,5134,5164,5205,5304,5419,5420,5501,6418,6640,6645,6704,6981,7011,7199,7745,7755,7918,8049,
            8101,8220,8268,8346,8432,8635,8645,8646,8921,9156,9174,
            9234,9888]
sent_incor=[24,25,26,33,35,56,73,74,82,96,97,98,102,103,105,106,138,139,140,177,214, 228,
            244, 255, 256, 257, 306, 307, 308, 323, 324, 325, 326, 327, 329, 330,
            339, 340,341,380,402,403, 404, 442,443, 454,504,510,511,519,520,521,
            558,559,560,561,562,563,597,598,599,612,613,623,836,636,637,638,639,640,
            660,669,671,696,697,698,722, 755, 766, 767, 768, 784, 790, 791, 850,
            851,852, 874, 876, 877, 879, 887, 888, 895, 896, 897, 922, 928, 938,
            946, 947, 948, 952, 953, 954, 957, 958, 959, 960, 980, 981,1014, 1033,
            1034, 1035, 1054, 1056, 1085, 1096, 1098,
            1149, 1153, 1161, 1162, 1163, 1164, 1180, 1182, 1191, 1198, 1199, 1200,
            1216, 1218, 1230, 1258, 1269, 1276, 1286, 1303, 1309, 1311, 1327, 1328,
            1329, 1353, 1370, 1379, 1392, 1394, 1395, 1423, 1424, 1425, 1432, 1433, 1434,
            1434, 1476, 1495, 1496, 1497, 1498, 1499,
            1559, 1560, 1596, 1623, 1644, 1654, 1660, 1661, 1662, 1663,1664,1665,
            1712, 1735, 1736, 1737, 1738, 1747, 1748, 1749, 1774, 1775, 1776, 1777, 1790, 1792,
            1825, 1826, 1827, 1840, 1841, 1842, 1854, 1882, 1883,
            1942, 1943, 1944, 1981, 1982, 1983, 1987, 1988,2002,2003,2004,
            2033,2047,2048,2049,2065,2066,2067,2104, 2105, 2106, 2108, 2143, 2144, 2145,
            2161,2162,2163,2173,2177,2181,2192,
            2220, 2224, 2225, 2226, 2236, 2238, 2260, 2261, 2262, 2292, 2299,
            2300, 2301, 2314, 2315, 2316, 2333, 2338, 2339, 2340, 2343, 2347,
            2385, 2386, 2387, 2388,2401, 2402, 2403, 2420, 2446, 2453, 2454, 2464, 2466, 2470, 2471, 2472, 2494, 2495, 2496, 2498,
            2506, 2507, 2508,2647, 2648, 2649, 2656, 2657, 2658, 2668, 2670, 2671,2672, 2673, 2679, 2684, 2685, 2690, 2691, 2695, 2696, 2697,
            2713, 2714, 2715, 2725, 2726, 2727, 2755, 2767, 2769,2800, 2828, 2829, 2831, 2832, 2834, 2840, 2899,
            2900, 2921, 2922, 2943, 2986, 2988, 2994,
            3000, 3023, 3028, 3029, 3030, 3037, 3038, 3039, 3058, 3059, 3128, 3171, 3173, 3181, 3183, 3185,
            3220, 3238, 3239, 3240, 3241, 3242, 3243, 3284, 3285, 3286, 3300, 3313, 3314, 3315, 3347, 3348, 3355, 3356, 3357,3363, 3376, 3377,
            3378, 3381,3409, 3418,3454, 3455, 3456, 3460,
            3538, 3539, 3540, 3544, 3559, 3591, 3595, 3596, 3601, 3602, 3613, 3614, 3615, 3616, 3617, 3623, 3624, 3625, 3626, 3627, 3682, 3683,
            3748, 3749, 3750,3763, 3815,
            3816, 3820, 3821, 3822, 3826, 3828, 3829, 3830, 3831, 3839,3866, 3882,
            3904, 3905, 3906, 3920, 3921, 3925, 3926, 3927, 3931, 3940, 3941, 3942, 3943, 3945, 3967, 3968, 3969, 3977, 3984,
            3985, 3986, 3987, 3988, 3989, 3990,
            4009, 4010, 4011, 4015, 4016, 4017, 4027, 4037, 4039, 4040, 4041, 4048, 4049, 4050, 4075, 4076, 4077,4099, 4100,
            4123, 4174, 4175, 4182, 4192, 4193, 4194, 4216, 4217, 4218, 4246, 4247, 4248, 4255,4258, 4276, 4277, 4278,

            4309, 4321, 4322, 4323, 4351, 4352, 4353, 4354, 4355, 4356, 4382, 4392, 4411, 4420, 4421, 4427, 4428,4457, 4428, 4442, 4447, 4449,
            4462, 4463, 4464, 4465, 4492, 4493,4494,4510, 4511, 4512, 4513, 4514, 4515, 4534, 4535, 4536, 4537, 4538, 4539, 4576, 4577,
            4615, 4616, 4617, 4645, 4646, 4647, 4648, 4649, 4675, 4677, 4698, 4726, 4727, 4728, 4746, 4791, 4821, 4858, 4859, 4860, 4861,
            4861, 4862, 4863, 4879, 4880, 4881, 4887, 4889, 4890, 4894, 4895,4896, 4898, 4928, 4929, 4934, 4962,4972, 4973, 4974,
            5044, 5045, 5046, 5079, 5086, 5089, 5090, 5091, 5112, 5116, 5117, 5118, 5150, 5184, 5234, 5272, 5273, 5274, 5275, 5276, 5277, 5281, 5283, 5308,
            5309, 5310, 5316, 5320, 5322, 5331,
            5341, 5342, 5343, 5365, 5366, 5392, 5394, 5398, 5398, 5399, 5399, 5400, 5400, 5408, 5409, 5410, 5411,5433,5434, 5412, 5417, 5418,5440, 5441, 5442,
            5452, 5453, 5454, 5469, 5470, 5471, 5472, 5494, 5495, 
            5524, 5525, 5526,5588, 5605, 5606, 5607, 5623, 5624, 5625, 5648, 5656, 5658, 5668, 5669, 5713, 5713, 5714, 5714, 5715, 5716, 5718, 5743, 5744, 5745,
            5750, 5758, 5798,5799, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822,5941,5943,5944,5945,5946,5991,
            6000, 6010, 6018, 6020, 6021, 6034, 6035, 6036, 6053, 6056, 6057, 6074, 6085, 6086, 6087, 6094, 6095, 6096, 6130, 6132,
            6136, 6137, 6165, 6167, 6168, 6169, 6170, 6197, 6232, 6233, 6234, 6244,  6245, 6246, 6278, 6279, 6292, 6299,
            6309, 6310, 6311, 6321, 6331, 6339, 6348, 6397, 6398, 6399, 6406, 6408, 6436, 6437, 6438, 6445, 6446, 6447, 6448, 6449, 6450,
            6487,6489, 6490, 6491, 6492,6589, 6590, 6591, 6592, 6626, 6627, 6628, 6690, 6707, 6708, 6718, 6719, 6720, 6726, 6755, 6778, 6779, 6780, 6808, 6809,6810, 6811, 6812,
            6813, 6817, 6818, 6819, 6844, 6845, 6850, 6851, 6852, 6880, 6881, 6882, 6903, 6918, 6920, 6921, 6944, 6967, 968, 6969, 6970,
            6971, 6972,7000, 7001, 7002, 7015, 7016, 7017, 7036, 7037, 7039, 7040, 7048, 7049, 7050, 7098, 7198, 7222, 7223, 7224, 7244, 7267, 7303, 7304,
            7305, 7333, 7335,7336, 7337, 7338, 7372, 7373, 7375, 7376, 7376, 7377, 7384, 7385, 7386, 7387, 7389, 7393, 7394, 7395, 7396, 7397, 7402, 7420,
            7421, 7422, 7453, 7454, 7455, 7469,7473, 7475, 7476, 7478, 7485, 7507, 7508, 7509, 7509, 7516, 7517, 7554, 7588, 7589, 7590, 7597, 7598, 7599,
            7657, 7672, 7672, 7673,  7674, 7696, 7697, 7699, 7700,7726, 7727, 7728, 7733, 7734, 7768, 7769, 7770, 7774, 7775, 7776, 7798, 7799, 7800, 7813,
            7814, 7815, 7822, 7852, 7854, 7896, 7900, 7901, 7902, 7928, 7930, 7933,7934, 7935, 7936, 7938,7951, 7957, 7958, 7959, 7989,
            8008, 8015, 8016, 8032, 8050, 8052, 8053, 8054, 8055, 8098, 8099, 8105, 8106, 8110, 8122, 8124,
            8147, 8148, 8181, 8185, 8197, 8198, 8199,8224, 8225, 8226, 8227, 8230, 8231, 8240, 8278, 8279, 8280, 8287, 8289, 8293, 8294, 8295, 8296, 8297,
            8298, 8299, 8300, 8301, 8328, 8347, 8350, 8398, 8399, 8476, 8477, 8478,8498, 8499,8503, 8504, 8505, 8509, 8512, 8513, 8514, 8515, 8516, 8521, 8522,
            8523, 8578, 8579, 8580, 8593, 8594, 8595, 8605, 8606, 8607, 8609, 8626, 8627, 8628,8628, 8663, 8674,  8675, 8676, 8695, 8696, 8773, 8774, 8775,
            8804, 8845, 8845, 8846, 8847, 8851, 8852, 8853,8879, 8886, 8887, 8888, 8889,8909, 8914, 8915, 8916, 8929, 8931, 8941, 8942, 8943, 8944, 8945,
            8946, 8947, 8948, 8949, 8974,8980, 8989, 8990, 8991,9168,9011, 9058, 9059, 9060, 9064, 9065, 9066, 9091, 9092, 9093, 9097, 9098, 9099, 9118, 9119, 9120,
            9121, 9122, 9123, 9137, 9149,9220, 9221, 9222, 9223,
            9224, 9225, 9253, 9254, 9268, 9268, 9269, 9269, 9270,
            9286, 9287, 9288, 9292, 9298, 9313, 9314, 9315, 9316, 9316, 9317, 9318,
            9337, 9338, 9339, 9364, 9365, 9366, 9391, 9392, 9393, 9411, 9419, 9433, 9434, 9435, 9442, 9443, 9443, 9444, 9469, 9481, 9482, 9493, 9494, 9495,
            9496,9517, 9518, 9519, 9526, 9527, 9528, 9534, 9539,
            9553, 9553, 9554, 9554, 9555, 9607, 9608, 9608, 9609,
            9614, 9630, 9631, 9632, 9633, 9652,
            9658, 9659,9660, 9661, 9662, 9663, 9682, 9682, 9683,
            9683, 9684, 9684, 9703, 9704, 9705, 9721, 9723, 9727,
            9728, 9729, 9734, 9739, 9754, 9769,
            9796, 9797, 9805, 9806,9807, 9814, 9815, 9816, 9822, 9844, 9845, 9893, 9894, 9917, 9926, 9927, 9945, 9997]

#enc with entail label..

enc=[9002, 9010, 9013, 9019, 9025, 9034, 9039, 9041,9049, 9056, 9069, 9112, 9117, 9126, 9129, 9146, 9151, 9157,
     9165, 9178, 9181, 9189, 9197, 9238, 9256, 9264, 9265, 9284, 9291, 9302, 9305, 9307, 9321, 9331, 9335, 9340,
     9346, 9355, 9371, 9380, 9382, 9390, 9401, 9404, 9406, 9450, 9452, 9455, 9464, 9472, 9475, 9492, 9501, 9502,
     9512, 9513, 9530, 9561, 9564, 9566, 9573, 9581, 9584, 9597, 9619, 9655, 9667, 9673, 9680, 9719, 9735, 9746,
     9786, 9790, 9792, 9794, 9813, 9821, 9828, 9831, 9838, 9843, 9875, 9885, 9889, 9897, 9912, 9933, 9947, 9949,
     9954, 9955, 9958, 9963, 9976, 9984, 9994,
8037,8045, 8061, 8074, 8083, 8096, 8113, 8125, 8131, 8155, 8160, 8162, 8164, 8168, 8170, 8182, 8205, 8210, 8223,
     8229, 8233, 8242, 8265, 8334, 8343, 8351, 8362, 8372, 8374, 8379, 8380, 8381, 8385, 8405, 8410, 8413, 8430,
     8458, 8463, 8466, 8481, 8489, 8510, 8520, 8527, 8543, 8545, 8585, 8600, 8623, 8631, 8638, 8647, 8681, 8702,
     8716, 8731, 8739, 8751, 8760, 8765, 8772, 8782, 8799, 8808, 8826, 8829, 8830, 8860, 8865, 8869, 8881, 8896,
     8918, 8955, 8965, 8969, 8972,
7005, 7008, 7018, 7023, 7025, 7027, 7060, 7064, 7072, 7084, 7087, 7092, 7119, 7121, 7127, 7133, 7143, 7150,
     7154, 7157, 7170, 7173, 7175, 7181, 7182, 7186, 7190, 7192, 7201, 7206, 7210, 7215, 7216, 7227, 7239, 7242,
     7272, 7279, 7292, 7294, 7297, 7302, 7321, 7329, 7332, 7344, 7356, 7399, 7403, 7406, 7412,7415, 7431, 7447,
     7464, 7468, 7482, 7490, 7503, 7515, 7537, 7552, 7569, 7571, 7584, 7611, 7614, 7636, 7644, 7648, 7652, 7659,
     7668, 7681, 7690, 7714, 7720, 7739, 7763, 7790, 7793, 7802, 7803, 7807, 7817, 7820, 7824, 7827, 7832, 7841,
     7850,7855, 7865, 7889, 7893, 7895, 7899, 7907, 7913, 7922, 7946,7974, 7978, 7981, 7982,
6005, 6008, 6028, 6029, 6040, 6046, 6066, 6077, 6079, 6099, 6113, 6144, 6166, 6182, 6184, 6185, 6188, 6191, 6200,
     6204, 6212, 6214, 6224,6226, 6228, 6249, 6251, 6263, 6269, 6276, 6282, 6342, 6352, 6359, 6363, 6373, 6381,
     6386, 6389, 6401, 6427, 6462,6470, 6484, 6502, 6507, 6508, 6511, 6516, 6518, 6526, 6545, 6575, 6582, 6594,
     6603, 6609, 6629, 6638, 6644, 6650, 6654, 6655, 6659, 6664, 6682, 6692, 6695, 6696, 6699, 6700, 6730, 6746,
     6750, 6753, 6759, 6760, 6768, 6774, 6775, 6782, 6787, 6790, 6794, 6796, 6814, 6820, 6832, 6839, 6841, 6865,
     6871, 6872, 6876, 6879, 6885, 6888, 6901, 6911, 6914, 6923, 6925, 6928, 6941, 6945, 6956, 6979, 6989, 6999,
5000, 5018, 5022, 5026, 5043, 5054, 5061, 5065, 5087, 5092, 5142, 5145, 5156, 5162, 5169, 5177, 5188, 5208, 5209,
     5221, 5236, 5240, 5242, 5246, 5256, 5265, 5280, 5292, 5311, 5317, 5324, 5333, 5336, 5345, 5363, 5369, 5373,
     5374, 5405, 5438, 5450, 5486, 5504, 5506, 5508, 5532, 5535, 5547, 5550,5571, 5577, 5620, 5633, 5640, 5641,
     5646, 5654, 5676, 5691, 5699, 5726, 5728, 5740, 5754, 5773, 5778, 5781, 5796,5832, 5838, 5843, 5848, 5855,
     5857, 5859, 5871, 5875, 5898, 5906, 5910, 5912, 5916, 5928, 5934, 5935, 5940, 5949, 5977,
4005, 4007, 4014, 4035, 4036, 4043, 4058, 4060, 4079, 4087, 4094, 4098, 4117, 4122, 4143, 4158, 4164, 4184, 4198,
     4201, 4214, 4223, 4230, 4236, 4239, 4256, 4263, 4268, 4310, 4312, 4328, 4332, 4335, 4346, 4365, 4366, 4375,
     4378, 4430, 4438,4461, 4486, 4491, 4497, 4507, 4552, 4556, 4565, 4586, 4587, 4588, 4595, 4603, 4612, 4620,
     4627, 4631, 4637, 4643, 4661, 4664, 4667, 4678, 4682, 4689, 4695, 4697, 4702, 4703, 4713, 4714, 4715, 4718,
     4743, 4744, 4750, 4755, 4762, 4764, 4771, 4774, 4778, 4780, 4788, 4800, 4803, 4814, 4823, 4835, 4841, 4847,
     4854, 4872, 4909, 4910, 4915, 4921, 4945, 4948, 4961, 4970, 4976,
3008, 3011, 3020, 3025, 3040, 3045, 3048, 3056, 3066, 3071,3083, 3110, 3130, 3149, 3157, 3184, 3195, 3196, 3207,
     3215, 3226, 3235, 3247, 3258, 3270, 3281, 3293, 3295, 3321, 3323, 3324, 3333, 3335, 3338, 3342, 3372, 3394,
     3405, 3412,3424, 3443, 3467, 3474, 3526, 3533, 3547, 3551, 3577, 3589, 3593, 3619, 3648, 3650, 3657, 3665,
     3703,3706, 3727, 3728, 3778, 3795, 3803, 3810, 3813, 3817, 3836, 3849, 3851, 3853, 3857, 3860, 3864, 3865,
     3900, 3903, 3930, 3939, 3947, 3961, 3966, 3992,
2001, 2019, 2027, 2029, 2046, 2059, 2069, 2082, 2085, 2087, 2102, 2121, 2125, 2128, 2134, 2141, 2150, 2189, 2191,
     2202, 2204, 2233, 2265, 2274, 2287,2318, 2320, 2345, 2346, 2359, 2364, 2375, 2379, 2406, 2412, 2414, 2418,
     2424, 2427, 2429, 2431,2442, 2450, 2468, 2475, 2500, 2503, 2519, 2523, 2524, 2529, 2535, 2539, 2559, 2585,
     2590, 2595, 2602, 2619, 2627, 2630, 2659, 2663, 2681, 2688, 2704, 2711, 2731, 2738, 2742, 2754, 2772, 2773,
     2778, 2779, 2791, 2793, 2797, 2808, 2809, 2875,2881, 2889, 2901, 2903, 2915, 2918, 2948, 2958, 2961,2962,
     2966, 2973, 2980,
1002, 1019,1025, 1032, 1042, 1076, 1089, 1101, 1109, 1137, 1138, 1142, 1167, 1178, 1185, 1192, 1233, 1235, 1238,
     1243, 1257, 1267, 1271, 1292, 1298, 1313, 1315, 1323, 1326, 1348, 1357, 1381, 1397, 1401, 1404, 1407, 1408,
     1413,1415, 1418, 1426, 1429, 1446, 1451, 1468, 1474, 1477, 1480, 1510, 1516, 1524, 1530, 1534, 1540, 1545,
     1546, 1562, 1576, 1583, 1591, 1601, 1607, 1632, 1634, 1655, 1668, 1670, 1672, 1695, 1698, 1724, 1731, 1750,
     1755, 1756, 1758, 1783, 1793, 1824, 1844, 1850, 1859, 1869, 1877, 1880, 1896, 1903, 1906, 1909, 1913, 1920,
     1925, 1938, 1958, 1965, 1975, 1978, 1994]



#enc with contrad label..

##enc=[1007, 1143, 1151,1417, 1473, 1514, 1535, 1606, 1771, 1862, 1923, 1928,2011, 2045, 2142, 2200, 2207, 2210,
##     2264, 2511, 2512, 2521, 2526, 2623, 2708, 2876,
##     3082, 3109, 3133, 3279, 3466, 3473, 3498, 3510, 3693, 3908, 3910,4006, 4029, 4168, 4183, 4261, 4282, 4385,
##     4458, 4480, 4490, 4568, 4630, 4742,
##     5006, 5041, 5059, 5329, 5493, 5515, 5529, 5542, 5567, 5735, 5756, 5771, 5939, 5966, 5975, 5994,6198, 6238,
##     6355, 6365, 6430, 6456,6461, 6505, 6506, 6806, 6873, 6875,6878, 6957,
##     7179, 7269, 7343, 7400, 7432, 7538, 7583, 7624, 7750, 7785, 7866, 7908, 7912,8158, 8204, 8228, 8256, 8340,
##     8388, 8402, 8484, 8494, 8544, 8559, 8587, 8625, 8718, 8740, 8796, 8806, 8824, 8849, 8871,
##     9016, 9144, 9158, 9160, 9280, 9319, 9352, 9361, 9421, 9465, 9522, 9657, 9880, 9952, 9961]

#.....contradiction analysis...
##cc=[9008,9015,9047,9052,9063,9086,9101,9104,9113,9124,9135,9141,9161,9164,9167,9187,9204,9217,9229,9233,9240,9323,
##    9336,9367,9370,9395,9418,9438,9449,9459,9468,9471,9474,9479,9491,9524,9541,9544,9557,9562,9572,9578,9629,9636,
##    9644,9681,9686,9715,9722,9725,9773,9802,9824,9830,9835,9850,9858,9877,9899,9920,9951,9960,9975,9996]

##cc=[8013,8019,8030,8038,8065,8080,8088,8093,8138,8179,8186,8194,8247,8248,8258,
##    8262,8263,8271,8272,8277,8282,8304,8337,8344,8356,8395,8423,8442,8456,8462,
##    8534,8552,8583,8590,8612,8619,8630,8632,8641,8657,8666,8672,8673,8699,8705,
##    8712,8727,8745,8759,8764,8770,8790,8793,8810,8834,8839,8843,8868,8875,8893,
##    8905,8912,8925,8938]

##cc=[7003,7086,7093,7103,7108,7132,7149,7163,7167,7187,7191,7194,7213,7217,7233,7255,7263,7301,7306,7317,7318,7326,
##    7331,7366,7369,7382,7405,7417,7428,7439,7467,7521,7548,7566,7575,7577,7593,7619,7621,7633,7651,7661,7683,7705,
##    7735,7744,7756,7772,7782,7787,7797,7804,7821,7826,7839,7842,7859,7894,7919,7924,7942,7953,7956,7962,7990]
##cc=[6023,6049,6060,6073,6110,6117,6133,6138,6159,6177,6179,6193,6206,6219,6221,6237,6273,6275,6293,6296,6335,6336,
##    6341,6345,6371,6375,6390,6433,6441,6452,6459,6467,6478,6495,6497,6513,6515,6520,6524,6531,6560,6566,6581,6584,
##    6619,6622,6625,6647,6649,6662,6673,6706,6716,6725,6732,6738,6740,6744,6747,6754,6766,6784,6804,6824,6826,6854,
##    6890,6895,6900,6908,6909,6968,6975,6978]

#..neutral old classification....systemout....
#1k....
##nn_old=[7, 14, 28, 29, 31, 32, 34, 48, 51, 58, 70, 90, 132, 135, 137, 141, 152,
##        154, 167, 171, 174, 178, 180, 181, 182, 183, 185, 189, 190, 197, 209,
##        216, 217, 219, 227, 233, 275, 276, 281, 285, 309, 364, 367, 375, 376,
##        381, 391, 392, 394, 396, 405, 412, 413, 416, 417, 420, 422, 429, 437,
##        445, 456, 458, 463, 464, 473, 476, 488, 492, 518, 529, 530, 539, 542,
##        544, 550, 554, 568, 569, 573, 575, 583, 594, 595, 600, 601, 606, 614,
##        643, 652, 653, 659, 664, 679, 700, 709, 739, 743, 744, 747, 764, 772,
##        773, 778, 780, 782, 783, 795, 812, 818, 832, 837, 843, 853, 859, 860,
##        866, 867, 868, 871, 883, 890, 902, 921, 929, 936, 956, 963, 970, 978,
##        983]
#2k....
##nn_old=[1001, 1015, 1020, 1023, 1024, 1026, 1038, 1044, 1048, 1058, 1059, 1060,
##        1067, 1091, 1094, 1099, 1100,
##        1102, 1111, 1114, 1116, 1135, 1144, 1146, 1147, 1160, 1166, 1173, 1186,
##        1188, 1193,
##        1204, 1210, 1217, 1225, 1237, 1240, 1242, 1247, 1261, 1263, 1275, 1278,
##        1282, 1283,
##        1288, 1301, 1304, 1305, 1307, 1324, 1325, 1338, 1343, 1355, 1363, 1366,
##        1368, 1369,
##        1371, 1380, 1382, 1386, 1402, 1416, 1442, 1444, 1447, 1448, 1456, 1462,
##        1466, 1467,
##        1475, 1484, 1489, 1490, 1491, 1493, 1501, 1503, 1508, 1517, 1528, 1539,
##        1544, 1547,
##        1565, 1579, 1580, 1581, 1582, 1584, 1585, 1589, 1597, 1602, 1621, 1627,
##        1630, 1638,
##        1648, 1657, 1666, 1680, 1682, 1692, 1702, 1704, 1717, 1730, 1739, 1740,
##        1746, 1757,
##        1764, 1765, 1768, 1769, 1779, 1794, 1798, 1799, 1805, 1806, 1815, 1818,
##        1822, 1830,
##        1831, 1833, 1834, 1836, 1837, 1847, 1855, 1856, 1873, 1881, 1887, 1888,
##        1889, 1904,
##        1922, 1936, 1937, 1948, 1952, 1953, 1954, 1957, 1959, 1962, 1966, 1972]
#nn old 3k...
##nn_old=[2017, 2024, 2025, 2040, 2053, 2061, 2070, 2073, 2076, 2089, 2093, 2096,
##        2097, 2099, 2124, 2127, 2130, 2137, 2158, 2178, 2179, 2184, 2185, 2186,
##        2187, 2190, 2194, 2198, 2199, 2205, 2209, 2211, 2221, 2239, 2241, 2242,
##        2246, 2247, 2257, 2266, 2285, 2294, 2295, 2296, 2307, 2317, 2326, 2352,
##        2354, 2356, 2358, 2369, 2371, 2372, 2374, 2380, 2389, 2393, 2411, 2433,
##        2449, 2483, 2490, 2492, 2525, 2533, 2537, 2548, 2549, 2551, 2560, 2563,
##        2572, 2574, 2581, 2582, 2584, 2588, 2596, 2597, 2605, 2608, 2611, 2614,
##        2615, 2621, 2632, 2634, 2640, 2642, 2644, 2655, 2661, 2680, 2689, 2701,
##        2706, 2720, 2723, 2730, 2744, 2746, 2747, 2758, 2760, 2768, 2787, 2794,
##        2796, 2804, 2805, 2806, 2811, 2812, 2813, 2819, 2824, 2830, 2835, 2836,
##        2853, 2861, 2872, 2879, 2880, 886, 2890, 2895, 2931, 2932, 2936, 2937,
##        2938, 2964, 2965, 2977, 2982, 2995, 2998]
#nn old...4k..
##nn_old=[3006, 3022, 3035, 3036, 3050, 3051, 3053, 3054, 3069, 3070, 3074, 3075, 3080, 3105, 3108, 3113, 3115,
##        3123, 3124, 3126, 3131, 3136, 3138, 3160, 3166, 3188, 3202, 3203, 3204, 3211, 3214, 3217, 3221, 3233,
##        3246, 3248, 3250, 3265, 3266, 3280, 3283, 3290, 3292, 3311, 3319, 3329, 3337, 3339, 3344, 3346, 3375,
##        3385, 3399, 3417, 3419, 3420, 3422,  3430, 3432, 3440, 3441, 3446, 3468, 3469, 3471, 3478, 3480, 3484,
##        3487, 3489, 3491, 3495, 3503, 3504, 3518, 3520, 3521, 3527, 3530, 3543, 3545, 3558, 3561, 3565, 3570,
##        3574, 3582, 3587, 3590, 3600, 3606, 3608, 3609, 3612, 3620, 3621, 3634, 3635, 3644, 3654, 3655, 3667,
##        3671, 3674, 3681, 3696, 3712, 3713, 3715, 3716, 3732, 3742, 3745, 3751, 3753, 3754, 3756, 3774, 3787,
##        3832, 3834, 3842, 3843, 3844, 3869, 3873, 3889, 3913, 3915, 3917, 3919, 3922, 3936, 3946, 3948, 3951,
##        3955, 3965, 3973, 3981, 3982, 3983, 3994]
#nn old...5k..
##nn_old=[4003, 4020, 4022, 4031, 4032, 4045, 4061, 4062, 4069, 4073, 4084, 4086, 4089, 4101, 4103, 4104, 4106,
##        4109, 4110, 4118, 4133, 4135, 4136, 4138, 4139, 4145, 4149, 4161, 4163, 4170, 4173, 4188, 4204, 4206,
##        4225, 4226, 4243, 4245, 4249, 4250, 4253, 4260, 4265, 4266, 4271, 4273, 4292, 4308, 4318, 4319, 4320,
##        4331, 4343, 4348, 4350, 4360, 4370, 4377, 4380, 4383, 4400, 4403, 4404, 4410, 4415, 4424, 4429, 4433,
##        4437, 4444, 4445, 4466,4472, 4474, 4483, 4488, 4502, 4503, 4516, 4524, 4532, 4540, 4584, 4593, 4601,
##        4602, 4606, 4608, 4622, 4623, 4624, 4625, 4626, 4628, 4629, 4641, 4644, 4652, 4653, 4654, 4657, 4659,
##        4671, 4688, 4693, 4701, 4705, 4706, 4707, 4710, 4717, 4719, 4723, 4724, 4729, 4730, 4731, 4747, 4748,
##        4802, 4843, 4848, 4866, 4868, 4869, 4870, 4873, 4875, 4876, 4882, 4883, 4884, 4885, 4886, 4893, 4901,
##        4912, 4913, 4916, 4918, 4923, 4925, 4927, 4930, 4932, 4939, 4951, 4953, 4966, 4975, 4985, 4992]

#nn old...6k...
##nn_old=[5002, 5011, 5012, 5024, 5025, 5028, 5032, 5033, 5057, 5058, 5064, 5071, 5073, 5075, 5078, 5081, 5084,
##        5085, 5088, 5093, 5102, 5104, 5105, 5123, 5126, 5131, 5137, 5140, 5151, 5152, 5153, 5154, 5172, 5175,
##        5187, 5190, 5192, 5194, 5213, 5225, 5230, 5248, 5249, 5252, 5258, 5260, 5271, 5279, 5284, 5285, 5293,
##        5305, 5314, 5318, 5319, 5370, 5383, 5385, 5389, 5396, 5402, 5403, 5416, 5421, 5427, 5430, 5431, 5432,
##        5435,5436, 5457, 5458, 5461, 5464, 5484, 5497, 5499, 5505, 5509, 5511, 5512, 5527, 5539, 5540, 5543, 5553, 5554, 5555,
##        5556, 5565, 5573, 5574, 5576, 5581, 5582, 5583, 5586, 5587, 5599, 5601, 5613, 5617, 5626, 5627, 5632,
##        5636, 5649, 5652, 5659, 5662, 5674, 5678, 5702, 5703,5704, 5717, 5720, 5721, 5732, 5746, 5747, 5762,
##        5763, 5767, 5768, 5769, 5770, 5774, 5787, 5788, 5814, 5828, 5829, 5839, 5840, 5842, 5852, 5853, 5867,
##        5868, 5870, 5879, 5881, 5893, 5897, 5901, 5902, 5903, 5920, 5922, 5926, 5931, 5936, 5951, 5953, 5954,
##        5957, 5964, 5970, 5978, 5980, 5983, 5988, 5989]
#nn old...7k...
##nn_old=[6024, 6025, 6032, 6037, 6049, 6051, 6055, 6058, 6060, 6067, 6068, 6076, 6084, 6097, 6100, 6103, 6106,
##        6109, 6110, 6115, 6116, 6117, 6133, 6134, 6138, 6147, 6153, 6155, 6159, 6175, 6176, 6177, 6183, 6193,
##        6194, 6195, 6206, 6219, 6222, 6229, 6253, 6259, 6264, 6265, 6271, 6273, 6291, 6296, 6297, 6298, 6306,
##        6316, 6318, 6328, 6330, 6335, 6337, 6341, 6351, 6356, 6366, 6371, 6372, 6377, 6394, 6409,6432, 6433,
##        6435, 6439, 6440, 6452, 6459, 6465, 6467, 6475, 6478, 6480, 6494, 6495, 6496, 6497, 6501, 6512, 6513,
##        6514, 6515, 6520, 6524, 6528, 6530, 6531, 6534, 6536, 6538, 6558, 6560, 6563, 6566, 6581, 6584, 6596,
##        6598, 6605, 6619, 6623, 6625, 6647, 6662, 6663, 6673, 6680, 6687, 6701, 6706, 6711, 6725, 6731, 6732,
##        6735, 6740, 6741, 6744, 6754, 6762, 6772, 6791, 6804, 6822, 6826, 6828, 6854, 6855, 6867, 6890, 6895,
##        6899, 6900, 6907, 6926, 6937, 6953, 6961, 6968, 6975, 6976, 6977, 6978, 6993, 6996]

#nn old...8k..
##nn_old=[7003, 7009, 7012, 7042, 7046, 7055, 7076, 7081, 7086, 7088, 7093, 7094, 7096, 7102, 7103, 7108, 7109,
##        7110, 7132, 7136, 7145, 7149, 7159, 7160, 7163, 7167, 7187, 7189, 7191, 7200, 7213, 7214, 7217, 7229,
##        7233, 7255, 7256, 7261, 7263, 7266, 7274, 7283, 7287, 7301, 7306, 7308, 7318, 7324, 7326, 7331, 7359,
##        7366, 7369, 7370, 7379, 7381, 7382, 7398, 7405,7408, 7417, 7418, 7428, 7439, 7450, 7459, 7467, 7479,
##        7481, 7488, 7493,7506, 7511, 7520, 7523, 7529, 7548, 7560, 7564, 7577, 7591, 7619, 7621, 7622, 7631,
##        7639, 7645, 7653, 7661, 7662, 7669, 7683, 7705, 7708, 7716, 7722, 7735, 7752, 7760, 7781, 7782, 7787,
##        7797, 7804, 7821, 7826, 7835, 7859, 7860, 7875, 7882, 7894, 7914, 7919, 7920, 7926, 7929, 7953, 7956,
##        7962, 7967, 7968, 7969, 7977, 7996, 7998]
#nn old...9k...
##nn_old=[8013, 8017, 8019, 8020, 8030, 8034, 8038, 8048, 8057, 8063, 8065, 8067, 8072, 8080, 8086, 8088, 8089,
##        8092, 8093, 8104, 8111, 8115, 8137, 8138, 8150, 8186, 8188, 8191, 8194, 8215, 8221, 8247, 8248, 8257,
##        8258, 8262, 8263, 8264, 8271, 8272, 8275, 8276, 8277, 8282, 8304, 8305, 8324, 8329, 8331, 8337, 8348,
##        8357, 8367, 8387, 8390, 8394, 8395, 8403, 8419, 8423, 8428, 8434, 8442, 8455, 8456,8462, 8480, 8487,
##        8491, 8506, 8517, 8534, 8535, 8539, 8549, 8552, 8553, 8572, 8582, 8583, 8590, 8591, 8602, 8618, 8619,
##        8632, 8633, 8641, 8642, 8656, 8657, 8658, 8666, 8672, 8673, 8684, 8686, 8691,8699, 8700, 8705, 8711,
##        8712, 8720, 8727, 8744, 8745, 8759, 8770, 8781, 8790, 8791, 8793, 8818, 8834, 8843, 8844, 8850, 8868,
##        8873, 8877, 8880, 8884, 8890, 8893, 8905, 8906, 8908, 8925, 8934, 8936, 8938, 8940, 8959, 8961, 8978,
##        8981, 8998]

#nn old...10k...

##nn_old=[9000, 9008, 9037, 9043, 9046, 9053, 9061, 9063, 9072, 9075, 9100,
##        9104, 9105, 9111, 9124, 9125, 9131, 9135, 9140, 9141, 9161, 9162, 9164,
##        9167, 9177, 9187, 9196, 9200, 9202, 9204, 9206, 9213, 9217, 9227, 9229,
##        9233, 9242, 9245, 9258, 9273, 9275, 9276, 9290, 9295, 9299, 9323, 9327,
##        9328, 9336, 9341, 9349, 9354, 9367, 9370, 9394, 9395, 9418, 9420, 9425,
##        9432, 9438, 9448, 9449, 9458, 9459, 9460, 9468, 9470, 9471, 9474, 9478,
##        9479, 9491, 9524, 9541, 9542, 9544, 9551, 9562, 9563, 9572, 9578, 9587,
##        9591, 9593, 9600, 9618, 9629, 9636, 9639, 9644, 9646, 9654, 9664, 9672,
##        9677, 9678, 9679, 9681, 9687, 9691, 9695, 9710, 9715, 9722, 9725, 9742,
##        9752, 9766, 9773, 9781, 9789, 9802, 9804, 9810, 9817, 9824, 9830, 9835,
##        9850, 9855, 9856, 9861, 9866, 9877, 9879, 9891, 9892, 9904, 9916, 9920,
##        9921, 9935, 9951, 9960, 9962, 9968, 9971, 9973, 9975, 9981, 9996]

for i in range(10000):
    if ((lab[i] =="-") or(i in avoid) or (i in sent_incor) or (i in pars_incor)or (i in cc_avoid)or (i in ee_avoid)):# (i==184) or (i==188 )or(i== 196)or (i==128)or(i==47)or(i==274) or(i==286)or(i==331):
       lab_correct.append(not_cor)
    else :
        lab_correct.append(cor)

count=0
for i in range(1000):
    if lab_correct[i]=='no':
               count+=1


##hyp_sample=[]
##evi_sample=[]
##lab_sample=[]
##
##for i in nn_old:
####    # print("enc i",i)
##    hyp_sample.append(hyp[i])
##    evi_sample.append(evi[i])
##    lab_sample.append(lab[i])
##
####l=8433
##l=0
##u=len(hyp_sample)
##hyp_sample=hyp_sample[l:u]
##evi_sample=evi_sample[l:u]
##lab_sample=lab_sample[l:u]

l=0
u=100

hyp_sample=hyp[l:u]
evi_sample=evi[l:u]
lab_sample=lab[l:u]
lab_cor_sample=lab_correct[l:u]


###...........reading grammar check data......
##x=[]
##y=[]
##with open('dataset_snli_473.txt', 'r') as in_file:
##    text = in_file.read()
##    sents = nltk.sent_tokenize(text)   
##
##for i in range(0,len(sents),2):
##   x.append(sents[i])
##   y.append(sents[i+1])    
##
##with open('label_473.txt', 'r') as f:
##    data = f.readlines()
##    
##da=[]
##for c in range(len(data)):
##        
##        da.append(data[c].replace("\n",""))
##
##hyp_sample=x[0:1]
##evi_sample=y[0:1]
##lab_sample=da[0:1]

###---------to extract sentences from Scitail to list.....
##def extract_text():
##    with open("scitail_1.0_dev.csv","r") as data:'drawing'
##        train = csv.DictReader(data, delimiter='\t')
##        evi_sentences = []
##        hyp_sentences = []
##        labels = []
##        
##        for row in train:
##            hyp_sentences.append(row["Sentence1"])
##            evi_sentences.append(row["Sentence2"])
##            labels.append(row["goldlabel"])
##            
##    return hyp_sentences, evi_sentences, labels
##
##hyp, evi, lab = extract_text()
##
##lab_correct=[]
##cor="yes"
##not_cor="no"
####avoid=[21,47,128,165,184,188,196,265,274,286,331,369,441,771,842,1055,1087,1107,1113,1213,1568]
##for i in range(len(lab)):
##    if (lab[i] =="-") :
##       lab_correct.append(not_cor)
##    else :
##        lab_correct.append(cor)
##
##
##hyp_sample=[]
##evi_sample=[]
##lab_sample=[]
##lab_cor_sample=[]
##hyp_sample=hyp[10:100]
##evi_sample=evi[10:100]
##lab_sample=lab[10:100]
##lab_cor_sample=lab_correct[10:100]
#parser output.............
os.environ["STANFORD_PARSER"] ="/home/nishy/stanford-parser-full-2018-10-17/stanford-parser.jar"
os.environ["STANFORD_MODELS"] = "/home/nishy/stanford-parser-full-2018-10-17/stanford-parser-3.9.2-models.jar"
dependency_parser=StanfordDependencyParser(model_path="/home/nishy/stanford-parser-full-2018-10-17/edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz")


vow=["a","e","i","o","u"]
con=["b","c","d","f","g","h","j","k","l","m","n","p","q","r","s","t","v","w","x","y","z"]

colours=["black","blue","white","red","green","orange","brown","yellow","pink","green","purple"]
instruments=["guitar","drum","saxophone","oboe","piano","flute","horn","violin","banjo","trumpet"]
animals=['sheep','dog','cat','cow','camel','goat','horse','dolphin','lamb']
vehicles=['tractor','boat','motorcycle','bike','car','jeep','bus','van']
game=['hockey','football','baseball','soccerball','dodgeball','volleyball','cricket','tennis','rugby','chess']
food=['sandwich', 'tomato','pancake','fruit','salad','vegetable']
rooms=["kitchen","bathroom","hall"]
read=["book","newspaper","magazine"]
food_time=["dinner","meal"]

animal=["dog","cat","horse","cow","elephant"]
costum=['shirt','costume','dress','skirt','suit','coat','outfit','jersey','top','pants','suits','jacket','trunk','hoodie','sweatshirt','bathrobe','clothing','sandal','vest','tutu','short']
colours=["black","blue","white","red","green","orange","brown","yellow","pink","green","purple"]
ps=['VBZ','WRB','VBP']
pp=['VBD','VBN']
nn=['NNS','NNPS']
nn_exclude=["building","ceiling","king","ping","ring","singer","something",'spring',"thing","wing"]
gr=["group","bunch","pair"]
coup=["man","woman"]
four_whl=["car","jeep"]
two_whl=["bike","scooter"]




"""glove wordmap......"""

glove_wordmap = {}
with open("glove.6B.50d.txt", "r") as glove:
    for line in glove:
        name, vector = tuple(line.split(" ",1))
        glove_wordmap[name] = np.fromstring(vector, sep=" ")

#...combining nmodes....
def nmode_combine(s_nmod,v_nmod,o_nmod):
        #nmod=s_nmod+v_nmod+o_nmod
         nmod=[]
         su_nmod=[]
         ve_nmod=[]
         ob_nmod=[]
         for i in range(len(s_nmod)):
             nmod.append(s_nmod[i][0])
             su_nmod.append(s_nmod[i][0])
         for i in range(len(v_nmod)):
             nmod.append(v_nmod[i][0])
             ve_nmod.append(v_nmod[i][0])
         for i in range(len(o_nmod)):
             nmod.append(o_nmod[i][0])
             ob_nmod.append(o_nmod[i][0])
             #nmod=su_nmod+ve_nmod+ob_nmod
             # # # # # # # print("nmod inside fn:~~~~~~~",nmod)
         return (nmod,su_nmod,ve_nmod,ob_nmod)


#....nmod similarity
def nmod_similar(hyp_sub_nmod,evi_sub_nmod):
    f_snmod=0
    for i in evi_sub_nmod:
        if i in hyp_sub_nmod:
            f_snmod=1
    return f_snmod

#....calculating vectors...
def glov_vector(hyp_sub):        
    v1=[]
    for i in hyp_sub:
        if i in glove_wordmap:
                v1.append(glove_wordmap[i])  
    return v1

#...calculating cosine similarity......

def cosine_similarity(v1,v2):
    
    sumxx, sumxy, sumyy = 0, 0, 0
    for i in range(len(v1)):
      
        x = v1[i]; y = v2[i]
        sumxx += x*x
        sumyy += y*y
        sumxy += x*y
    cos_sim= round((sumxy/math.sqrt(sumxx*sumyy)),8)
    ## # # # # # # print( cos_sim)
    return cos_sim

#.....calculating euclidean distance

def dist(v1,v2):
        sumxx = 0
        dis_vec=[]
    #for p in range(len(v1)):
        sumxx = 0
        x = v1; y = v2
        ## # # # # # # print("len x:",len(x))
##        # # # # # # # print("vector x:",x)
##        # # # # # # # print("vector y:",y)
        for i in range(len(x)):
             sumxx += (x[i]-y[i])*(x[i]-y[i])
        #sqrt( (plot1[0]-plot2[0])**2 + (plot1[1]-plot2[1])**2 )
        d= math.sqrt(sumxx)
        ## # # # # # # print("distance inside function:",d)
##        dis_vec.append(d)
##        # # # # # # # print("dis_vec:",dis_vec)
        return (round(d,4))

# Function to convert 'in' to 'wear'..

def listToString(s):  
   st1 = ' '.join([str(elem) for elem in s])  
   return (st1)  
        
def in_correction(hyp_sub,hyp_token1):
##    # print("hyp_token1:",hyp_token1)
    lmtzr = WordNetLemmatizer()
    y="in"
    z="wearing"
    if hyp_sub:
      x=hyp_sub[0]
##      # print("x:",x)
      for i in range(len(hyp_token1)) :
##        # # print("hyp_token[i]:",hyp_token1[i])
        if (hyp_token1[i])==x:
##            # print("in",11)
            j=hyp_token1[i+1]
##            # print("j:",j)
            if j==y:
##                # print("equal")
                hyp_token1[i+1]= z
      st=listToString(hyp_token1)
      # # # # # # # print("in corrected sent:\\\\",st)
    return st

def is_convert(ver):
##    # print("ver inside fn",ver) 
##    ["is" if i=="'s" else i for i in ver]
    for i in range(len(ver)):
        if ver[i]=="'s":
            ver[i]="be"
##    # print("ver inside fn1",ver)  
    return(ver)

#.....calculating similarity of vectors based on distance measure
    
def sim(list1,list2):
       dist_list=[]
       min_list=[]
       max_list=[]
       len1=len(list1)
       len2=len(list2)
       if len1<len2:
           #loop_len=len1
           loop_list1=list1
           loop_list2=list2
       else:
           #loop_len=len2
         loop_list1=list2
         loop_list2=list1
         for i in loop_list1:             
             for j in loop_list2:
                 d=cosine_similarity(i,j)
                 #d=dist(i,j)
                 dist_list.append(d)
               
             ## # # # # # # print ("dist_list:",dist_list)
             
             l=min(dist_list)
             t=max(dist_list)
             min_list.append(l)
             max_list.append(t)
       if not min_list:
           min_value=0
       else:   
            min_value=min(min_list)
       if not max_list:
           max_value=0
       else:   
            max_value=max(max_list)     
       return(max_value,min_value)

#---------------stop word removal in context sent
def stop_wd(tok):
  stop_words=set(stopwords.words("english"))
  #print("stop_words",stop_words)
  filt_sent=[]
  for w in tok:
    if w not in stop_words:
       filt_sent.append(w)
  
  ## # # # # # # print ("tokens after stop word removal:",filt_sent)
  return filt_sent

def elim_pun(lem):    
  lem1=[]
  for i in lem:
     if i in ['(',')',';','.','.',':','-',',']:
        continue
     lem1.append(i)
  ## # # # # # # print ("\ntokens after punctuation removal:\n",lem1)     
  return lem1    

#---------lemma fn....

 
def lem(sent):
     lemma_sent=[]
     wnl=WordNetLemmatizer()
     lemma_sent = [wnl.lemmatize(w) for w in sent]
   #  # # # # # # # print("tokens after lemmatization:",lemma_sent)
     return lemma_sent

#....extracting cop reln first....
    
def insert_first(x,reln):
    x1=[]
    
    for i in range(len(x)):
          if x[i][2]==reln:
              y=x[i]
              x1.insert(0,y)
          else:
              
              x1.append(x[i])
    return x1
    
#....parser output..triples output...
def extract_triples(sen):
   
    result = dependency_parser.raw_parse(sen)
##    new = list(parser.raw_parse(sen))
    ## # # # # # # print(result)

    dep = next(result)
    new = list(dep.triples())

##    new = (dep.triples()
 
    # # # # # # # print("triples output:",new)

#tuple to list.........

    new_list=[]
    for i in new:
      new_list.append(list(i))
      
##    # print("triples_list:",new_list)

    """converting unicodes to strings and placing the triplets into nested
list with dependency at last of each list...."""


    x=[]
   
    new_ll=[]
    for j in range(len(new_list)):
       new_ll=[]
       for i in range(0,3,2):
          new_ll.append(str(new_list[j][i][0].lower()))
          # # print("new_ll inside:",new_ll)
       new_ll.append(str(new_list[j][1].lower()))
       # # print("new_ll:",new_ll)
       x.append(new_ll)
##    # print("nested list:",  x)
#  ....inserting 'cop' reln first....
    r="cop"
    x1=insert_first(x,r)
##    for i in range(len(x)):
##          if x[i][2]=="cop":
##              y=x[i]
##              x1.insert(0,y)
##          else:
##              
##              x1.append(x[i])
          
##    # print("cop at first:",x1)
#...taking the words n pos tags...
    pos_list=[]
##    ps_lst=[]
    for t in range(len(new_list)):
        ps_ll=[]
        for t1 in range(0,3,2):
            # # print("new_list[t][t1]:",new_list[t][t1])
            ps_ll.append(list(new_list[t][t1]))
##            # # print("ps_ll:",ps_ll)
        for i in ps_ll:    
            if i not in pos_list:
                pos_list.append(i)
    # # print ("pos list:",pos_list)
    for i in range(len(pos_list)):
        pos_list[i][0] =pos_list[i][0].lower()
##        # print ("pos list_lower():",pos_list)   
        
    return x1,pos_list

#####tree......
    
####for line in result:
####    for sentence in line:
####        sentence.draw()


#code under construction.....matching of triplets......if (match)..then append 1 in that list element....

def triple_match(hyp_triples,evi_triples):
    temp_triples=evi_triples
    count=0
    cnt=0
    for i in range(len(evi_triples)):
        j=0
        if evi_triples[i] in hyp_triples:
                   temp_triples[i].append (1)
                   count=count+1
##        if ((evi_triples[i][0] in hyp_triples[i][0]) and (evi_triples[i][1] in hyp_triples[i][1])):
##            cnt=cnt+1
    return temp_triples,count

#extracting only the word pairs from the triples to cound dependency similarity...

def depen_match(hyp_triples,evi_triples):
    hyp_trip=[]
    evi_trip=[]
    cnt=0.0
    for i in range(len (hyp_triples)):
        h=[]
        for j in range(2):
           
           h.append(hyp_triples[i][j])
        hyp_trip.append(h)
    for i in range(len (evi_triples)):
        e=[]
        for j in range(2):
           
           e.append(evi_triples[i][j])
        evi_trip.append(e)
    for i in range(len(evi_trip)):
        if evi_trip[i] in hyp_trip:
            cnt+=1
    v=cnt/len(evi_trip)        
    return hyp_trip,evi_trip,cnt,v

#modified chinese code....in else part find similarity....

##def sim_w(wx,wy):
##    wx_syn=wn.synsets(wx)
##    # # # # # # # print("wx n wx_syn:",wx,wx_syn)
##    
##    wy_syn=wn.synsets(wy)
##    # # # # # # # print(" wy n wy_syn:",wy,wy_syn)
##    if wx==wy:
##        return 1
##    else:
##        if ((wx_syn and wy_syn)!=[]):
##            if (wx_syn[0].pos() ==wy_syn[0].pos()):
##               return (wn.lin_similarity(wx_syn[0],wy_syn[0], brown_ic))
##        else:
##            return 0

#code based on the paper....chinese syntactic feature...

def sim_w(wx,wy):
    if wx==wy:
        return 1
    else:
        return 0
    
def sim_p(q,w):
##    lenq=len(q)
    w1=q[0]
    w1bar=w[0]
    w2=q[1]
    w2bar=w[1]

    one=sim_w(w1,w1bar)
    if(one is None):
        one=0.0
    two=sim_w(w2,w2bar)
    if(two is None):
        two=0.0
    three=sim_w(w1,w2bar)
    if(three is None):
        three=0.0
    four=sim_w(w2,w1bar)
    if(four is None):
        four=0.0
    simd=(max(one,two))+(max(three,four))
    simp=0.5*(max((one+two),(three+four)))
##    # # # # # # # print("simp:",simp)    
    return simp,simd
    
def sim_syn(hyp_triples,evi_triples):
    val=0.0
    for i in range(len(evi_triples)):
        v=0.0
        for j in range(len(hyp_triples)):
           v,v1=sim_p(evi_triples[i],hyp_triples[j])
##           # # # # # # # print("v:",v)
           val=val+v
           hyp_len=len(hyp_triples)
           evi_len=len(evi_triples)
#...modification based on optimal alignment similarity..for normalization...
##           simi= ((val*(hyp_len+evi_len))/(2*hyp_len*evi_len))
##    return simi     
           if (hyp_len > evi_len):
               card=hyp_len
           else:
               card=evi_len
    return (val/card) 
           
#....calculating dependency triplet similarity score....(richa sharma...nidhi sharma....)
def sim_dep(hyp_triples,evi_triples):
    count=0
    for i in range(len(evi_triples)):
        for j in range(len(hyp_triples)):
            v,v1=sim_p(evi_triples[i],hyp_triples[j])
##            # print("v",v)
        if (v1==2):
            count+=1
    return count        
                
#....performing stemming and lemmatization based on pos tags....(inbuilt...)
##def stm_lem(pos_lst,wd):
##        
##    ps = PorterStemmer()
##    
##    # # print("wd n pos_lst:",wd,pos_lst)
####    xlar=wd
####    # # print("xlar :",xlar)
##    for m in range(len(pos_lst)):
##        # # print("m:",m)  
##        if (pos_lst[m][0]==wd):
####             # # print("xlar n m",xlar,m)
##             pqr=pos_lst[m][1]
##             # # print("pqr",pqr)
##             break
##    if pqr in pos1:
##                wrd=lmtzr.lemmatize(wd.lower())
####                break
##    elif pqr in pos2:
####            if pqr in pos2:
####               # # print("njksnjs")
##               wrd=ps.stem(wd.lower())
####               break
##    else:
##               wrd=wd
##    # # print("wd n wrd:",wd,wrd)
######    # # print("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz")
######    z=z+1
##    return wrd

#writing code to find base form of tokens.....

#...replacing continuous forms....

def stm_vbg(s1):
  s=["ambling","arranging","assembling","bicycling","conversing",
     "creating","cycling","dribbling","emerging","evaluating","guiding","handling",'juggling',"leaving","nuzzling",
     "opposing","raising","receiving","rehearsing","struggling","tickling","weaving","wrestling"]
  s0=["c","v"]
##  s2=["singing"]
  s3=["w","x","y"]
  s4=["covering","gathering",'happening','kayaking',"listening",
      "lowering",'modeling',"opening","ordering","shoveling","threatening",
      "traveling","visiting","wandering","watering","wondering"]
  s5=["using"]
  s6=["hula"]
  s7=["lying"]
##  s2=["carving","starving"]
##  s7=["practicing"]
##  # print("s1:",s1)
  if (s1=="singing" or s1== "sing"):
      return("sing")
  elif (s1 =="ring"):
      return("ring")
  elif (s1=="ping"):
      return(s1)  
##  elif (s1 in s7):
##      return("practise")
    
  elif (s1=="ingesting"):
    return("ingest")
  elif(s1=="swinging") or (s1=="swing"):
      return("swing")
  elif (s1=="astride"):
      return(s1)
  elif (s1 in s7):
      return("lie")
  elif (s1 in s) or (s1 in s5):
##      # print(11)
      return (s1.replace(s1[-3:],"e"))
  elif s1 in s6:
      return(s1)
  elif s1 in s4:
       return (s1.replace(s1[-3:],""))  
  elif (re.search("ing",s1)) and (s1[-4] in con and s1[-5] in con) and (s1[-4] in s0) :
      return (s1.replace(s1[-3:],"e"))
  elif  (re.search("ing",s1)) and (s1[-4] in con) and (s1[-5] in vow and s1[-6] in vow):
##      # print(11,s1[-5],s1[-6])
      return (s1.replace(s1[-3:],"") )
  elif (re.search("ing",s1)) and (s1[-4] in con) and (s1[-5]  in vow) and (s1[-4] not in s3):
##      # print(22)
      return (s1.replace(s1[-3:],"e") )
  elif (re.search("ing",s1)) and (s1[-4]==s1[-5] =="m" ) or (s1[-4]==s1[-5] =="k" )or (s1[-4]==s1[-5] =="n" ) or (s1[-4]==s1[-5] =="d" )or (s1[-4]==s1[-5] =="p" ) or (s1[-4]==s1[-5] =="g" ) or (s1[-4]==s1[-5] =="t" ):
##      # print("sitting") 
      return (s1.replace(s1[-4:],""))
##  elif (s1 in s2):
##      return(s1.replace(s1[-3:],""))
  else:
##      # print(11)
      return(s1.replace(s1[-3:],""))


##def stm_vbg(s1):
##    
##    s=["c","d","k","l","m","n","r","s","t","v","z"]
##    s2=["barking","cleaning","cooking","covering","drinking","drowning","eating",
##        "fighting","gaining",
##        "leading","learning",
##        "listening",
##        "looking","mentioning",
##        "packing",
##        "performing","reaching","reading","repainting","speaking","talking","waiting",
##        "walking","wandering","wearing","working"]
##    s3=["chasing","promising","opposing","struggling"]
##    s4=["killing","selling","telling"]
##
##    if (s1 in s2 ) or (s1 in s4):
##        return(s1[:-3])
##    elif re.search("eting",s1):
##        return(s1.replace(s1[-5:],"ete"))
####    elif re.search("nning",s1):
####        return(s1.replace(s1[-5:],"n"))
####    elif re.search("tting",s1):
####        return(s1.replace(s1[-5:],"t"))
##    elif re.search("ying",s1):
##        return(s1.replace(s1[-4:],"y"))
##    elif (s1 in s3):
##        
##        return(s1.replace(s1[-3:],"e"))
##    elif re.search("ising",s1):
##         return(s1.replace(s1[-4:],"ce"))
##    elif (re.search("nding",s1)):
##        return(s1.replace(s1[-3:]," "))
##    elif (re.search("lding",s1)):
##        return(s1.replace(s1[-3:]," "))
##    elif (s1[-4]==s1[-5] and re.search("ing",s1)):
##        return (s1[:-4])
##    elif (s1[-3:]=="ing" and s1[-4] in s) :
##        return(s1.replace(s1[-3:],"e"))
##    
##    elif s1=="singing":
##        
##        return(s1[:4])
##    elif re.search("ing",s1):
##        
##       return(s1.replace(s1[-3:],""))
    


def stm_jjr(s1):
    s=["larger","wiser","gentler","safer","stranger"]
    n=len(s1)
    if  s1 in s:
        return(s1.replace(s1[-1:],""))
    elif s1=="better":
        return("good")
    elif s1=="worse":
        return("bad")
    elif s1=="less":
        return("little")
    elif s1=="smaller" or s1=="taller":
        return(s1.replace(s1[-2:],""))
    elif re.search("ier",s1):
        return(s1.replace(s1[-3:],"y"))
    
##    elif (re.search("er",s1) and((s1[n-4] in con and s1[n-6] in con) and (s1[n-5] in vow))):
##        # print(22) 
##        return(s1.replace(s1[-3:]," "))
    elif s1[-3]==s1[-4] and re.search("er",s1):
        return s1.replace(s1[-3:],"")
    elif re.search("er",s1):
        return(s1.replace(s1[-2:],""))



def stm_jjs(s1):
    s=["largest","wisest","gentlest","safest","strangest"]
    n=len(s1)
    if  s1 in s:
##        # print(00)
        return(s1.replace(s1[-2:]," "))
    if re.search("iest",s1):
##        # print(11)
        return(s1.replace(s1[-4:],"y"))
    elif s1=="best":
        return("good")
    elif s1=="worst":
        return("bad")
    elif s1=="least":
        return("little")
    elif s1=="smallest" or s1== "tallest":
##        # print("rr")
        return(s1.replace(s1[-3:]," "))
##    elif ((s1[n-5] in con and s1[n-7] in con) and (s1[n-6] in vow)):
##        # print(22) 
##        return(s1.replace(s1[-4:]," "))
    elif s1[-4]==s1[-5] and re.search("est",s1):
##        # print(22)
        return s1.replace(s1[-4:],"")
    elif re.search("est",s1):
##        # print(33)
        return(s1.replace(s1[-3:],""))
    
def stm_nns(s1):
    lm=WordNetLemmatizer()
    s=["rollerskates","reclines"]
##    # print("s1:",s1)
    if s1=="men":
        return ("man")
    elif s1=="teeth":
        return ("tooth")
    elif s1 in s:
        return(s1[:-1])
    elif s1==("towards"):
        return(s1)
    elif (s1[-3:]=="ies") or (s1[-2:]=="es"):
        return(lm.lemmatize(s1.lower()))
    elif s1[-1]=="s":
##        # print(1331)
        return (s1[:-1])
    else:
        
        return(lm.lemmatize(s1.lower()))
    
def stm_adv(s1):
    if re.search("ily",s1):
        return(s1.replace(s1[-3:],"y" ))
    elif re.search("ly",s1):
        return(s1.replace(s1[-2:],""))

##def stm_adv(s1):
##    if re.search("ly",s1):
##        return(s1[:-2])
##    if re.search("ily",s1):
##        return(s1.replace(s1[-3:],"y"))

def stm_vbz(s1):
    n=len(s1)
    s2=["c","s"]
    s3=["is","are"]
    s4=["has","have"]
    s5=["does","do"]
    s6=["bakes","balances","bites","bubbles","chases","closes","competes",
        "completes","dangles","demonstrates","desires",'dives',"doles","drives","engraves",
        "examines",
        "faces",'gestures',"gives","glides","includes","incorporates","leaves","makes",'moves',
        "navigates","observes","poses",'purchases',"prepares",
        'raises','reclines',"resists","rides","sees","shaves","skates",
        "slides","smiles","smokes","suckles","takes","treks",'tumbles',
        "totes",'uses',
        "waves","wrestles","writes"]
    if s1 in s3:
        return("be")
    elif s1 in s4:
        return("have")
    elif s1 in s5:
        return("do")
    
    elif (re.search("ies",s1)):
        return(s1.replace(s1[-3:],"y"))
    
    elif (re.search("hes",s1)and s1[-4] in s2):
        return(s1.replace(s1[-2:],""))
    elif (re.search("es",s1)and (s1 not in s6)):
        return(s1[:-2])
    elif (re.search("ss",s1)):
        return(s1)

    elif s1[-1]=='s':
        return(s1[:n-1])
    
def stm_vbd(s1):
    #add code for loved,liked...
    
    d={"ate":"eat","arose":"arise","bathed":"bathe","bore":"bear","began":"begin",'bent':"bend","bit":"bite","blew":"blow",
       "broke":"break","brought":"bring","bought":"buy","caught":"catch",
       "chose":"choose","came":"come","crept":"creep","dove":"dive","did":"do",
       "drew":"draw","dreamt":"dream","drank":"drink","drove":"drive",
       "ate":"eat","fell":"fall","felt":"feel","fought":"fight","flew":"fly",
       "forgot":"forget","forgave":"forgive","froze":"freeze","got":"get",
       "gave":"give","went":"go","grew":"grow","hung":"hang","held":"hold","hid":"hide",
       "knew":"know","led":"lead","left":"leave","lay":"lie","lit":"light",
       "lost":"lose","lowered":"lower","made":"make","read":"read","rode":"ride","rang":"ring","rose":"rise","ran":"run",
       "saw":"see","sought":"seek","shook":"shake","sang":"sing","sank":"sink",
       "sat":"sit","spoke":"spoke","sprang":"spring","stood":"stand",
       "stole":"steal","stung":"sting","struck":"strike","swore":"swear",
       "swam":"swim","took":"take","tore":"tear","told":"tell","thought":"think",
       "threw":"throw","woke":"wake","wore":"wear","wed":"wed","won":"win","wrote":"write"}
    
    d1={"arisen":"arose","borne":"bear","begun":"begin","bitten":"bite","blown":"blow",
        "broken":"break","chosen":"choose","come":"come","done":"do","drawn":"draw",
        "drunk":"drink","driven":"drive","eaten":"eat","fallen":"fall","flown":"fly",
        "forgotten":"forget","forgiven":"forgive","frozen":"freeze","given":"give","gotten":"get",
        "gone":"go","grown":"grow","hidden":"hide","known":"know","litten":"light",'ridden':'ride',
        "rung":"ring","risen":"rise","run":"run","seen":"see","set":"set","shaken":"shake",'shown':'show',"sung":"sing",
        "sunk":"sink","spoken":"spoke","sprung":"spring","stolen":"steal","strewn":"strew",
        "taken":"take","torn":"tear","thrown":"throw","waken":"wake","worn":"wear",
        "written":"write"}
    
    s2=["said","paid","laid"]
    s3=["was","were","been"]
    s4=["had"]
    s5=["aged","amazed","amused",'assembled',"balanced","bored","bundled",
        "completed","confused",'decorated','disabled',"draped","examined",'engaged',"excluded",'eyed',"injured","involved","lined","loved",
        "liked",'moved',"naked","named",'observed',"operated",
        "piled","prepared","raised","secured","served","serviced",
        'shaved',"situated","tackled","tired","used",'waved']
    s6=["sled"]
    s7=[]
##    # print("s1",s1)
    if s1 in s3:
        return("be")
    elif s1 in s4:
        return("have")
    elif(s1=="red"):
        return(s1)
    elif s1=="tied":
        return ("tie")
    #elif s1=="lowered":
     #   return("lower")
    elif s1 in s6:
        return(s1)
    elif (s1=="rides"):
        return("ride")
    if re.search("ied",s1):
        return(s1.replace(s1[-3:],"y"))
    elif s1 in d.keys():
##        # print(11)
        return(d.get(s1))
    elif s1 in d1.keys():
        return(d1.get(s1))
    elif s1 in s2:
        return(s1.replace(s1[-2:],"y"))
##    elif( s1[-3]==s1[-4] and re.search("ed",s1)):
##        return (s1[:-3])
    elif s1 in s5:
        return(s1[:-1:])
    elif re.search("ed",s1) and (s1!="bed") and (s1[-3]==s1[-4]=='l'):
        return(s1[:-2])
    elif re.search("ed",s1) and(s1!="bed")and (s1[-3]==s1[-4]) and(s1[-3] and s1[-4]!='s' ):
##      # print(55)
      
      return(s1[:-3])
    
    elif re.search("ed",s1):
        
        return(s1[:-2])
    
    
def extract_pos(pos_lst,wd):
    for i in range(len(pos_lst)):
        if (pos_lst[i][0]==wd.lower()):
            return( pos_lst[i][1])
   
##def extract_cop_vbg(sub,triples,pos_lst):
    

def extract_pass(triples,pos_lst):
##    # print(11)
    sub=[]
    sub1=[]
    ver=[]
    ver1=[]
    obj=[]
    obj1=[]
    
    lmtzr = WordNetLemmatizer()
    for i in range(len(triples)):
        if triples[i][2]=='nsubjpass':
            if triples[i][1] not in sub1:
                sub1.append(triples[i][1])
            if triples[i][1] not in sub:
                  w1_pos=extract_pos(pos_lst,triples[i][1])
##                  # print("w1_pos n triples[i][1]",w1_pos,triples[i][1])
                  if w1_pos=="NNS"or "NNP":
                      w1=stm_nns(triples[i][1])
                      
                  elif w1_pos=="NN":
                        w1=triples[i][1].lower()
##                        # print("w1:",w1)
                  if w1==None:
                        w1=triples[i][1].lower()      
                  if w1 not in sub:
##                          # print("11",obj)
                          sub.append(w1)
##                          # print("22",obj)
##                x1=stm_lem(pos_lst,triples[i][1])
##                obj.append(x1)
            
                
##            x2=stm_lem(pos_lst,triples[i][0])
            if triples[i][0] not in ver1:
                ver1.append(triples[i][0])
            w2_pos=extract_pos(pos_lst,triples[i][0])
##            # print("w2_pos n triples[i][0]",w2_pos,triples[i][0])
            if (w2_pos=="VBG"):
                w2=stm_vbg(triples[i][0])
            elif(w2_pos in pp):
                w2=stm_vbd(triples[i][0])
            elif(w2_pos in ps):
                w2=stm_vbz(triples[i][0])         
            elif(w2_pos=="VB"):
                w2=(triples[i][0].lower())
  
##            # print("w2:",w2)
            if w2==None:
                  w2=triples[i][0].lower()
                 
            if w2 not in ver:  

                 ver.append(w2)
##                 # print("33",ver)
##            if x2 not in ver:    
##                ver.append(x2)
##            # print("passive",obj,ver)
##            sub.append(ver_nmod)
        if( triples[i][2]=='dobj'):
         obj1.append(triples[i][1]) 
         w2_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
         if w2_pos=="NNS":
            w2=stm_nns(triples[i][1])
##            # print("w2:",w2)
            if w2 not in obj:
              obj.append(w2)
            if w2==None:
                  w2=triples[i][1].lower()
  
         elif w2_pos=="NN" or "NNP":
             obj.append(triples[i][1].lower())            
         
##             # print("obj:",obj)                
         if triples[i][0] not in ver1:
             ver1.append(triples[i][0])
##             # print("ver1:",ver1)
             w3_pos=extract_pos(pos_lst,triples[i][0])
##             # print("w3_pos n triples[i][0]:",w3_pos,triples[i][0])
             if (triples[i][0]=="unto" and w3_pos=='VBG'):
               w3=None
             elif (w3_pos=="VBG"):
##                # print(11) 
                w3=stm_vbg(triples[i][0])
                if w3==None:
                    w3=triples[i][0].lower()
##                # print("w3:",w3)
             elif(w3_pos in pp):
                w3=stm_vbd(triples[i][0])
                if w3==None:
                    w3=triples[i][0].lower()
                
             elif(w3_pos in ps):
                w3=stm_vbz(triples[i][0])
                if w3==None:
                    w3=triples[i][0].lower()
             elif(w3_pos=="VB"):
                w3=(triples[i][0].lower())
                if w3==None:
                    w3=triples[i][0].lower()
             else:
                 w3=None
##         # # print("w3:",w3)
##             if w3==None:
##                    w3=triples[i][0].lower()
       
             if ((w3 not in ver) and (w3 != None)): 

                   ver.append(w3)
##                   # print("ver",ver)
    return sub,ver,obj,sub1,ver1,obj1

                    
def extract_parts_svo(triples,pos_lst):
##  # print("svo11")  
  sub=[]
  sub1=[]
  ver=[]
  ver1=[]
  obj=[]
  obj1=[]
  
  new_sub=[]
  new_ver=[]
  dn=['det','nummod']
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
  for i in range(len(triples)):
    if triples[i][2]=='nsubj' :
          # # print("triples[i][1]:",triples[i][1])
          if triples[i][1] not in sub1:
             sub1.append(triples[i][1])
          w_pos=extract_pos(pos_lst,triples[i][1])
##          # print("svo ")
          if w_pos=="NNS"or w_pos=="NNPS":
              w=stm_nns(triples[i][1])
              if w==None:
                  w=triples[i][1].lower()
              if w not in sub:
             
                 sub.append(w)

##          # # print("w:",w)
          elif w_pos=="NN" or w_pos=="NNP" or w_pos=="PRP":
              sub.append(triples[i][1].lower())
                       
##          # print("sub:",sub)
          
##          # # # # # # # print("sub b4 singular:",sub)
##       for k in sub:
##           o=str(p.singular_noun(k))
##           if o=="False":
##               sub1.append(k)
##           else:
##               sub1.append(o)
##           
##         #p.singular_noun(sub)
##            # # # # # # # print("singular sub:",sub1)
          if triples[i][0] not in ver1:
                ver1.append(triples[i][0])
          w1_pos=extract_pos(pos_lst,triples[i][0])
##          # print("w1_pos n triples[i][0]:",w1_pos,triples[i][0])
          if (w1_pos=="VBG"):
                w1=stm_vbg(triples[i][0])
          elif(w1_pos in pp):
                w1=stm_vbd(triples[i][0])
          elif(w1_pos in ps):
                w1=stm_vbz(triples[i][0])         
          elif(w1_pos=="VB"):
                w1=(triples[i][0].lower())
          else: 
                w1=None
          if w1==None:
                   w1=triples[i][0].lower()
      
          if w1 not in ver:  

                   ver.append(w1)
##          # print("verb:",ver)               
##          break
    if( triples[i][2]=='dobj'):
         obj1.append(triples[i][1]) 
         w2_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
         if w2_pos=="NNS":
            w2=stm_nns(triples[i][1])
##            # print("w2:",w2)
            if w2 not in obj:
              obj.append(w2)
            if w2==None:
                  w2=triples[i][1].lower()
  
         elif w2_pos=="NN" or "NNP":
             obj.append(triples[i][1].lower())            
         
##             # print("obj:",obj)                
         if triples[i][0] not in ver1:
             ver1.append(triples[i][0])
         w3_pos=extract_pos(pos_lst,triples[i][0])
##         # print("w3_pos n triples[i][0]:",w3_pos,triples[i][0])
         if (triples[i][0]=="unto" and w3_pos=='VBG'):
             w3=None
         elif (w3_pos=="VBG"):
                w3=stm_vbg(triples[i][0])
##                # print("w3:",w3)
         elif(w3_pos in pp):
                w3=stm_vbd(triples[i][0])
         elif(w3_pos in ps):
                w3=stm_vbz(triples[i][0])
         elif(w3_pos=="VB"):
                w3=(triples[i][0].lower())
##                # print("w3:",w3)
         else:
             w3=(triples[i][0].lower())
         if w3==None:
                    w3=triples[i][0].lower()
       
         if w3 not in ver: 

                   ver.append(w3)
##         # print("verb:",ver)                
##    elif triples[i][2] in dn:
##       if (triples[i][0] in sub):
####       if triples[i][1] not in det:
##         det.append(triples[i][1])
##         new_sub=triples[i][1]+" "+triples[i][0]
##    elif triples[i][2]=='aux':
##       if (triples[i][0] in ver):
####       if triples[i][1] not in aux:
##         aux.append(triples[i][1])
##         new_ver=triples[i][1]+" "+triples[i][0]
    if triples[i][2]== 'acl':
         sub1.append(triples[i][0])
         w4_pos=extract_pos(pos_lst,triples[i][0])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
         if w4_pos=="NNS":
            w4=stm_nns(triples[i][0])
##            # print("w2:",w2)
            if w4==None:
                  w4=triples[i][0].lower()

            if w4 not in sub:
              sub.append(w4)
         elif w4_pos=="NN" or w4_pos=="NNP":
             sub.append(triples[i][0].lower())
  
         ver1.append(triples[i][1])
##         # print("acl verb:",ver1)
         w5_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w5_pos,triples[i][1]",w5_pos,triples[i][1])
         if (w5_pos=="VBG"):
                
                w5=stm_vbg(triples[i][1])
##                # print("walking:",triples[i][1],w5) 
                ver.append(w5)
               
         elif(w5_pos in pp):
                w5=stm_vbd(triples[i][1])
                ver.append(w5)
         elif(w5_pos in ps):
                w5=stm_vbz(triples[i][1])
                ver.append(w5)
         elif(w5_pos=="VB"):
                w5=(triples[i][1].lower())
                ver.append(w5)
##                # print("w5:",w5)

        
##            w4=stm_lem(pos_lst,triples[i][0])
##            if w4 not in sub:
##               sub.append(w4)
##               # # print("sub",sub)
##               # # print("triples[i][1]:",triples[i][1])
##            w5=stm_lem(pos_lst,triples[i][1]) 
                if w5==None:
                    w5=triples[i][1].lower()
      
                if w5 not in ver:
                   ver.append(w5)
    ##         # print("verb:",ver)                
##    elif triples[i][2] in dn:
##       if (triples[i][0] in sub):
####       if triples[i][1] not in det:
##         det.append(triples[i][1])
##         new_sub=triples[i][1]+" "+triples[i][0]
##    elif triples[i][2]=='aux':
##       if (triples[i][0] in ver):
####       if triples[i][1] not in aux:
##         aux.append(triples[i][1])
##         new_ver=triples[i][1]+" "+triples[i][0]
    
##         # print("svo:",sub,ver,obj)
         # print("walk",ver)        
  return sub,ver,obj,sub1,ver1,obj1

def extract_cop(triples,pos_lst):
##    # print("cop11")
    sub=[]
    sub1=[]
    ver=[]
    ver1=[]
    obj=[]
    obj1=[]
    
    lmtzr = WordNetLemmatizer()
    for i in range(len(triples)):
        if triples[i][2]=='nsubj':
                  
                  if triples[i][1] not in sub1:
                      sub1.append(triples[i][1])
                  w_pos=extract_pos(pos_lst,triples[i][1])
##                  # print("w_pos",w_pos,triples[i][1] )
                  if w_pos=="NNS" or "NNP":
                      w=stm_nns(triples[i][1])
                  elif w_pos=="NN":
                        w=triples[i][1].lower()
##                  # print("w:",w)
                  if w==None:
                         w=triples[i][1].lower()
                  if w not in sub:
             
                            sub.append(w)

##          # # print("w:",w)
##                  elif w_pos=="NN":
##                     sub.append(triples[i][1].lower())
              
##            if triples[i][1] not in sub:
##                v1=stm_lem(pos_lst,triples[i][1])
##                sub.append(v1)
                
                  if triples[i][0] not in obj1:
                      obj1.append(triples[i][0])
                  w1_pos=extract_pos(pos_lst,triples[i][0])
##                  # print("w1_pos n triples[i][0]",w1_pos , triples[i][0])
                  if w1_pos=="VBG":
                      sub,ver,obj,s1,v1,o1=extract_parts_svo(triples,pos_lst)
                      break
                  else:  
                      
                      if w1_pos=="NNS" or "NNP":
                        w1=stm_nns(triples[i][0])
                      elif w1_pos=="NN" or w1_pos=="PRP":
                        w1=triples[i][0].lower()
##                  # print("w1:",w1)
                      if w1==None:
                         w1=triples[i][0].lower()
                      if w1 not in obj:
             
                         obj.append(w1)

                
                
##                v2=stm_lem(pos_lst,triples[i][0])
##                obj.append(v2)
        if triples[i][2]=='cop':
            if triples[i][1] not in ver1:
                ver1.append(triples[i][1])
            if triples[i][1] not in ver:
                
                w3_pos=extract_pos(pos_lst,triples[i][1])
##                # print("w3_pos,triples[i][1]",w3_pos,triples[i][1])
                if (w3_pos=="VBG"):
                    w3=stm_vbg(triples[i][1])
                    if w3==None:
                       w3=triples[i][1].lower()
                elif(w3_pos in pp):
                    w3=stm_vbd(triples[i][1])
                    if w3==None:
                       w3=triples[i][1].lower()
                elif(w3_pos in ps):
                    w3=stm_vbz(triples[i][1])
                    if w3==None:
                       w3=triples[i][1].lower()
                elif(w3_pos=="VB"):
                    w3=(triples[i][1].lower())
                # # print("w1:",w1)
                    if w3==None:
                       w3=triples[i][1].lower()
                else:
                    w3=triples[i][1].lower()
                if w3 not in ver:  

                          ver.append(w3)

        if( triples[i][2]=='dobj'):
         obj1.append(triples[i][1]) 
         w22_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
         if w22_pos=="NNS":
            w22=stm_nns(triples[i][1])
##            # print("w22:",w22)
            if w22 not in obj:
              obj.append(w22)
            if w22==None:
                  w22=triples[i][1].lower()
  
         elif w22_pos=="NN" or "NNP":
             obj.append(triples[i][1].lower())            
         
##             # print("obj:",obj)                
         if triples[i][0] not in ver1:
             ver1.append(triples[i][0])
         w33_pos=extract_pos(pos_lst,triples[i][0])
##         # print("w33_pos n triples[i][0]:",w33_pos,triples[i][0])
         if (triples[i][0]=="unto" and w3_pos=='VBG'):
             w33=None
         elif (w33_pos=="VBG"):
                w33=stm_vbg(triples[i][0])
##                # print("w33:",w33)
         elif(w33_pos in pp):
                w33=stm_vbd(triples[i][0])
         elif(w33_pos in ps):
                w33=stm_vbz(triples[i][0])
         elif(w33_pos=="VB"):
                w33=(triples[i][0].lower())
##                # print("w33:",w33)
         else:
             w33=(triples[i][0].lower())
         if w33==None:
                    w33=triples[i][0].lower()
       
         if w33 not in ver: 

                   ver.append(w33)                  
##    # print("cop",sub,ver,obj)
##                v3=stm_lem(pos_lst,triples[i][1])
##                ver.append(v3)
    return sub,ver,obj,sub1,ver1,obj1


def extract_parts_mod(triples,obj,pos_lst,sub_nmod,ver_nmod):
  
  mod=[]
  color_amod=[]
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
  for i in range(len(triples)):
##    if triples[i][2]=='amod':
##       if triples[i][0]  in sub:
##           
##         sub_mod.append(triples[i][1])
##
##       elif (triples[i][0]  in ver):  
##
##         ver_mod.append(triples[i][0])
##       elif (triples[i][0] in obj):
##       
##         obj_mod.append(triples[i][1])
     if triples[i][2]=='amod':
        if (triples[i][0] in obj or triples[i][0] in sub_nmod or triples[i][0] in ver_nmod  ):
##            # print("test")
            color_amod.append(triples[i][1])
##            # print("color mod&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&:",color_amod)
            mod.append(triples[i][1])
##            # # # # # # # print("color amod:",color_amod)
        else:
            if triples[i][1] not in mod:
##               # print("test1")
               mod.append(triples[i][1])

  return color_amod,mod


def extract_parts_nmod(triples,obj,ver,sub,pos_lst):
    
##  # print("nmod inside:",sub,ver,obj)
  ver_nmod=[]
  ver_nmod1=[]
  sub_nmod=[]
  sub_nmod1=[]
  obj_nmod=[]
  obj_nmod1=[]
  
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
  n=['nmod' ,'nmod:poss']
  for i in range(len(triples)):
    
    if triples[i][2] in n :
       if (triples[i][0] in ver): 
        
          ver_nmod.append(triples[i][1])
          w_pos=extract_pos(pos_lst,triples[i][1])
##          # print("vernmod_pos",w_pos,triples[i][1])
          if w_pos=="NNS"or w_pos=="NNPS":
                   w=stm_nns(triples[i][1])
                   if w==None:
                      w=triples[i][1].lower()
                   if w not in ver_nmod1:
             
                      ver_nmod1.append(w)

##          # # print("w:",w)
          elif w_pos=="NN" or w_pos=="NNP" or w_pos=="PRP":
                   ver_nmod1.append(triples[i][1].lower())
##          w1_pos=extract_pos(pos_lst,triples[i][0])
####          # print("w1_pos n triples[i][0]:",w1_pos,triples[i][0])
##          if (w1_pos=="VBG"):
##                w1=stm_vbg(triples[i][0])
##          elif(w1_pos in pp):
##                w1=stm_vbd(triples[i][0])
##          elif(w1_pos in ps):
##                w1=stm_vbz(triples[i][0])         
##          elif(w1_pos=="VB"):
##                w1=(triples[i][0].lower())
##          else: 
##                w1=None
##          if w1==None:
##                   w1=triples[i][0].lower()
##      
##          if w1 not in ver_nmod1:  
##
##                   ver_nmod1.append(w1)
       elif  (triples[i][0] in sub):
               sub_nmod.append(triples[i][1])
               w_pos=extract_pos(pos_lst,triples[i][1])
##               # print("nmod_pos",w_pos,triples[i][1])
               if w_pos=="NNS"or w_pos=="NNPS":
                   w=stm_nns(triples[i][1])
                   if w==None:
                      w=triples[i][1].lower()
                   if w not in sub_nmod1:
             
                      sub_nmod1.append(w)

##          # # print("w:",w)
               elif w_pos=="NN" or w_pos=="NNP" or w_pos=="PRP":
                   sub_nmod1.append(triples[i][1].lower())
       elif  (triples[i][0] in obj):
                   obj_nmod.append(triples[i][1])
              
  return sub_nmod1,ver_nmod1,obj_nmod1,sub_nmod,ver_nmod,obj_nmod

def extract_parts_comp(triples,obj,ver,sub,sub_nmod,ver_nmod,obj_nmod,pos_lst):
  
##  ver_nmod=[]
  sub_comp=[]
  obj_comp=[]
  s_ncomp=[]
  v_ncomp=[]
  o_ncomp=[]
  
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
##  n=['nmod' ,'nmod:poss']
  for i in range(len(triples)):
    
    if triples[i][2] =='compound' :
        
        if  (triples[i][0] in sub):
            w22_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
            if w22_pos=="NNS":
              w22=stm_nns(triples[i][1])
##            # print("w22:",w22)
              if w22 not in sub_comp:
                 sub_comp.append(w22)
              if w22==None:
                  w22=triples[i][1].lower()
  
            elif w22_pos=="NN" or "NNP":
               sub_comp.append(triples[i][1].lower())            
##               sub_comp.append(triples[i][1])
        elif  (triples[i][0] in obj):
              obj_comp.append(triples[i][1])
        elif  (triples[i][0] in sub_nmod):
              s_ncomp.append(triples[i][1])
        elif  (triples[i][0] in ver_nmod):
              v_ncomp.append(triples[i][1])
        elif  (triples[i][0] in obj_nmod):
              o_ncomp.append(triples[i][1])      
              
  return sub_comp,obj_comp,s_ncomp,v_ncomp,o_ncomp

def extract_parts_num(triples,obj,sub,pos_lst):
  
##  ver_nmod=[]
  sub_num=[]
  obj_num=[]
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
##  n=['nmod' ,'nmod:poss']
  for i in range(len(triples)):
    
    if triples[i][2] =='nummod' :
        
        if  (triples[i][0] in sub):
               sub_num.append(triples[i][1])
        elif  (triples[i][0] in obj):
              obj_num.append(triples[i][1])
              
  return sub_num,obj_num

def extract_parts_other(triples,pos_lst):
 
  
  advcl=[]
  advmod=[]
  mark=[]
##  comp=[]
##  num=[]
  neg=[]
  prt=[]
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
  for i in range(len(triples)):
    
    
    if triples[i][2]=='mark':
       if triples[i][1] not in mark:
         mark.append(triples[i][1])
    elif triples[i][2]=='advcl':
       if triples[i][1] not in advcl:
         advcl.append(triples[i][1])
    elif triples[i][2]=='advmod':
       if triples[i][1] not in advmod:
         advmod.append(triples[i][1])
##    elif triples[i][2]=='compound':
##       if triples[i][1] not in comp:
##         comp.append(triples[i][1])
    elif triples[i][2]=='neg':
       if triples[i][0] not in neg:
         neg.append(triples[i][0])
         # print("neg:",neg)
    elif triples[i][2]=='compound:prt':
        prt.append((triples[i][1]))
  return mark,advcl,advmod,neg,prt

def extract_parts_conj(triples,obj,sub,pos_lst):
  
##  ver_nmod=[]
  sub_conj=[]
  obj_conj=[]
  p=inflect.engine()
  lmtzr = WordNetLemmatizer()
##  n=['nmod' ,'nmod:poss']
  for i in range(len(triples)):
    
    if triples[i][2] =='conj' :
        if  (triples[i][0] in sub):
            w22_pos=extract_pos(pos_lst,triples[i][1])
##         # print("w2_pos n triples[i][1]:",w2_pos,triples[i][1])
            if w22_pos=="NNS":
              w22=stm_nns(triples[i][1])
##            # print("w22:",w22)
              if w22 not in sub_conj:
                 sub_conj.append(w22)
              if w22==None:
                  w22=triples[i][1].lower()
  
            elif w22_pos=="NN" or "NNP":
               sub_conj.append(triples[i][1].lower())     
##        if  (triples[i][0] in sub):
##               sub_conj.append(triples[i][1])
        elif  (triples[i][0] in obj):
              obj_conj.append(triples[i][1])
              
  return sub_conj,obj_conj


#.....unicode to string...

def uni_str(lem_input):
  lem=[]
  for i in range(len(lem_input)):
    if isinstance(lem_input[i],unicode):
        lem.append(unicodedata.normalize('NFKD', lem_input[i]).encode('ascii','ignore'))     
    else:
        lem.append(lem_input[i])

#  # # # # # # # print("string converted sent after lemmatizing :",lem)
  return(lem)

#finding synonyms and antonyms.................

def syn(wi):
  synonyms = []
  antonyms = []
  
  for syn in wn.synsets(wi):
             for l in syn.lemmas():
	             synonyms.append(str(l.name()))
	             if l.antonyms():
	                  antonyms.append(str(l.antonyms()[0].name()))
  
  return  synonyms,antonyms


#finding hyponyms
def hyp(wi):
  hypony=[]
  h=[]
  s=wn.synsets(wi)
  for i in range(len(s)):
    hypony.append([lemma.name() for synset in s[i].hyponyms() for lemma in synset.lemmas()])
  ## # # # # # # print("hypon@@@@@@@@@@@2:",hypon)

  for q in range(len(hypony)):
    for w in range(len(hypony[q])):
        h.append(str(hypony[q][w]))
     
  ## # # # # # # print("\nhypon single list:",h)     
  return  h

#finding hypernyms...
def hyperon(wi):
    hyper=[]
    hypero=[]
    m =wn.synsets(wi)

    for i in range(len(m)):
       hyper.append([lemma.name() for synset in m[i].hypernyms() for lemma in synset.lemmas()])
### # # # # # # print("\n hypernym:",hyper)

    for f in range(len(hyper)):
      for v in range(len(hyper[f])):
        hypero.append(str(hyper[f][v]))
## # # # # # # print("\n hypernym:",hypero)
    return hypero    


#finding entailments
def ent(wi):
  en=[]
  entil=[]
  e=wn.synsets(wi)
  for i in range(len(e)):
     en.append([lemma.name() for synset in e[i].entailments() for lemma in synset.lemmas()])
 ## # # # # # # print("entailment reln:",en)

  for f in range(len(en)):
    for v in range(len(en[f])):
        entil.append(str(en[f][v]))
  ## # # # # # # print("\n entilement:",entil)
  return entil     

def mero(wi):
  merony=[]
  m=[]
  s=wn.synsets(wi)
  for i in range(len(s)):
    merony.append([lemma.name() for synset in s[i].part_meronyms() for lemma in synset.lemmas()])
  ## # # # # # # print("hypon@@@@@@@@@@@2:",hypon)

  for q in range(len(merony)):
    for w in range(len(merony[q])):
        m.append(str(merony[q][w]))
        
  return  m    

def holo(wi):
  holony=[]
  ho=[]
  s=wn.synsets(wi)
  for i in range(len(s)):
    holony.append([lemma.name() for synset in s[i].part_holonyms() for lemma in synset.lemmas()])
  ## # # # # # # print("hypon@@@@@@@@@@@2:",hypon)

  for q in range(len(holony)):
    for w in range(len(holony[q])):
        ho.append(str(holony[q][w]))
  return  ho    

#.....eliminating the verb content in sub n obj...

def elim_ver(a):
  c=[]
  b=pos_tag(a)
##  # # # # # # # print("\nsub n obj with tag:\n",b)
  for i in range(len(b)):
    if (b[i][1]=='VBG' or b[i][1]=='VB' or b[i][1]=='VBP' or b[i][1]=='VBZ' or b[i][1]=='VBN' or b[i][1]=='VBD'):
          continue
    else:
         c.append(b[i][0])
  return c

#..extracting wn relation....

def wn_reln(i):
        
        x,y=syn(i)
        hy=hyp(i)
        b=ent(i)
        hypero=hyperon(i)
        m=mero(i)
        ho=holo(i)
        return x,y,hy,b,hypero,m,ho      

#......created dictionary for covering hypernymy relations...
def dic_search(i,evi_sub):
  flag=0
  
  val=[]
  dic = {'2':{1:'many',2:'group'},
         'accessory':{1:'bandanna',2:'glass'},
         'activity':{1:'action'},
         'adult':{1:'teacher'},
         
         'agape':{1:'open'},
         'air':{1:'scenery',2:'leap',3:'jump',4:'midair'},
         'airplane':{1:'aircraft'},
         'aline':{1:'line'},
         'alone':{1:'one'},
         'amble':{1:'walk'},
         "amaze":{1:'amazement'},
         'amuse':{1:"laughing"},
         'angry':{1:'rage'},
         'animal': {1: 'dog',2:'cat',3:'cow',4:'camel',5:'goat',6:'horse',7:'dolphin',8:'lamb',9:'puppy'},
         'arm':{1:'hold',2:'volleyball'},
         'art':{1:'paint'},
         'artwork':{1:'picture'},
         'asleep':{1:'nap',2:'sleep'},
         'athlete':{1:'wrestler',2:'golfer'},
         'attire':{1:'jacket',2:'shirt'},
         'audience':{1:'crowd'},
         'baby':{1:'toddler'},
         'bag':{1:'bookbag'},
         'bake':{1:'make'},
         'ball':{1:'game',2:'golfer'},
         'ballet':{1:'dance'},
         'band':{1:'musician'},
         'beach':{1:'ocean',2:'surf',3:'sand'},
         'beside':{1:'side'},
         'beverage':{1:'beer'},
         'bicyclist':{1:'bike',2:'bicycle'},
         'bike':{1:'bicycle',2:'superbike',3:'biker'},
         'biker':{1:'man'},
         'bird':{1:'pigeon',2:'pelican'},
         'book':{1:'manual'},
         'boy':{1:'kid',2:'child',3:'guy'},
         'bright':{1:'colorful'},
         'brother':{1:'boy'},
         'brunette':{1:'woman'},
         'bunch':{1:'group',2:'several'},
         'busy':{1:'crowded'},
         'camera':{1:'snap',2:'pose',3:'picture'},
         'car':{1:'vehicle',2:'suv'},
         'cast':{1:'handle'},
         'caucasian':{1:'white'},
         'celebrate':{1:'celebration'},
         'ceremony':{1:'ritual'},
         'channel':{1:'tv'},
         'chase':{1:'herd'},
         'chat':{1:'talk'},
         'cheerful':{1:'laugh'},
         'cheer':{1:'look'},
         'child': {1:'boy',2:'girl'},
         'christmas':{1:'santa'},
         
         'cig':{1:'cigarette'},
         'cinema':{1:'odeon'},
         'city':{1:'building'},
         'class':{1:'classroom'},
         'clean': {1:'powerwash',2:'erase',3:'brushes',4:'scrap'},
         'close':{1:'touch',2:'around'},
         'cloth':{1:'costume',2:'clothes',3:'garb'},
         'cloud':{1:'cloudy'},
         'cold':{1:'snow'},
         'color':{1:'pink'},
         'colorful':{1:'red',2:'green',3:'yellow',4:'fuchsia',5:'black'},
         'cook':{1:'cooking',2:'pan',3:'apron',4:'baking',5:'kitchen',6:'food'},
         'competitor':{1:'compete'},   
         'computer':{1:'laptop',2:'desk'},
         'concert':{1:'music',2:'sing'},
         'confuse':{1:'confused'},
         'conversate':{1:'talk',2:'discuss'},
         'conversation':{1:'discuss',2:'conversing'},
         'convertible':{1:'vehicle'},
         'costume':{1:'outfit',2:'robe'},
         'court':{1:'ball'},
         'cream':{1:'cone'},
         'creation':{1:'build'},
         'crowd':{1:'crowded'},
         'cycle':{1:'bicycle'},
         'dance':{1:'ballet'},
         'danger':{1:'burn'},
         'darkly':{1:'black'},
         
         'device':{1:'microphone',2:'cellphone',3:'camera'},
         'decorate':{1:'decorative'},
         'deny':{1:'resist'},
         'dirt':{1:'broom'},
         'dirty':{1:'filthi'},
         'disable':{1:'wheelchair'},
         'discuss':{1:'discussion'},
         'display':{1:'wear'},
         'distance':{1:'afar'},
         'dog':{1:'husky',2:'greyhound'},
         'door':{1:'enter'},
         'dot':{1:'outfit'},
         'drawing':{1:'picture'},
         'dress':{1:'wear',2:'costumed'},
         'drink': {1:'beverage',2:'cola'},
         'drive':{1:'hammer'},
         'duty':{1:'uniform'},
         'dwell':{1:'house'},
         'eat':{1:'mouth',2:'dinner',3:'enjoy',4:'cook',5:'bite'},
         'edge':{1:'shore'},
         'elderly':{1:'old'},
         'electronic':{1:'camera'},
         'engage':{1:'work'},
         'enjoy':{1:'watch',2:'smile',3:'laugh',4:'fun'},
         'entertain':{1:'dance',2:'sing'},
         'entertainer':{1:'man'},
         'equipment':{1:'beam'},
         'examine':{1:'observe'},
         'escape':{1:'leap'},
         'exercise':{1:'yoga',2:'treadmill',3:'barbell'},
         'face':{1:'nose',2:'eyebrow',3:'moustache'},
         'family':{1:'child'},
         'female':{1:'she'},
         'fight': {1: 'throw'},
         'fill':{1:'surround',2:'enjoy'},
         'find':{1:'search'},
         'fish':{1:'fishing',2:'swordfish'},
         'flip':{1:'watch'},
         'float':{1:'boogie'},
         'floor':{1:'kneel'},
         'flower':{1:'bouquet'},
         'fly':{1:'flight',2:'air'},
         #'folk':{1:'people'},
         'food': {1: 'sandwich', 2:'tomato',3:'plate',4:'eat',5:'hog',6:'pancake',7:'fruit',8:'feed',9:'vegetable',10:'batter',11:'donut',12:'cook'},
         'foot':{1:'stand',2:'walk',3:'kick'},
         'friendly':{1:'nuzzle'},
         'fruit':{1:'banana',2:'vegetable'},
         'full':{1:'overflow',2:'fill'},
         'fun':{1:'splash',2:'laugh'},
         'game':{1:'hockey',2:'nintendo',3:'d',4:'football',5:'ball',6:'baseball',7:'volleyball',8: 'pong'},
         'glass':{1:'sunglass',2:'window'},
         'gloved':{1:'glove'},
         'gi':{1:'uniform'},
         'go':{1:'pass',2:'climb'},
         'goer':{1:'people'},
         'gorgeous':{1:'beautiful'},
         'grab':{1:'hold'},
         'grass':{1:'grassy',2:'grassland'},
         'grey':{1:'gray'},
         'grocery':{1:'food'},
         'ground':{1:'court',2:'street'},
         'group':{1:'crowd',2:'several',3:'adult',4:'people',5:'family',6:'male'},
         'guitar':{1:'guitarist'},
         'guy':{1:'men',2:'gentleman',3:'male'},
         'happy':{1:'laugh',2:'smile'},
         'happily':{1:'smile'},
         'hair':{1:'haired',2:'head'},
         'hand':{1:'carry',2:'hold'},
         'head':{1:'headscarf',2:'forehead'},
         'hold':{1:'curl',2:'join',3:'hand'},
         'holy':{1:'monk'},
         'home':{1:'room'},
         'hood':{1:'hooded'},
         'hoodie':{1:'hooded',2:'shirt'},
         'horse':{1:'horseman'},
         'house':{1:'bathroom'},
         'human':{1:'people',2:'woman',3:'man',4:'youth',
                  5:'person',6:'girl',7:'child',8:'boy',9:'teen'},
         'indian':{1:'india'},   
         'indoor':{1:'close',2:'room',3:'floor',4:'bed',5:'restaurant',6:'gym',7:'inside'},
         'ingest':{1:'wineglass'},
         'inside':{1:'restaurant',2:'bed',3:'ceiling',4:'shelter',5:'aisle',6:'hospital',7:'indoor',8:'cab'},
         'instrument':{1:'drum',2:'horn',3:'violin',4:'banjo',
                       5:'guitar',6:'saxophone',7:'flute',
                       8:'trumpet',9:'accord'},
         'interact':{1:'talk',2:'play'}, 
         'issue':{1:'trouble'},
         'item':{1:'ball',2:'board',3:'coat' },
         'ivory':{1:'piano'},
         'job':{1:'serve',2:'work'},
         'jog':{1:'jogs'},
         'kid': {1:'boy',2:'girl',3:'children'},
         'lab':{1:'dog'},
         'laboratory':{1:'lab'},
         'lady':{1:'girl',2:'female',3:'woman'},
         'laugh':{1:'humorous'},
         'laundry':{1:'clothes'},
         'lawn':{1:'grass'},
         'liquid':{1:'water',2:'juice'},
         'little':{1:'young'},
         'location':{1:'square'},
         
         'look':{1:'examine',2:'watch',3:'diagnostic',4:'browse'},
         'machine':{1:'mower',2:'equipment'},
         'make':{1:'create'},
         'male':{1:'men'},
         'mammal':{1:'dog'},
         'man':{1:'player',2:'vendor',3:'s# printer',4:'crowd',5:'horseman',6:'owner',7:'worker',8:'soldier',9:'asian'},
         'many':{1:'several',2:"group",3:'dozen'},
         'mark':{1:'marker'},
         'match':{1:'sport',2:'ball'},
         'master':{1:'man'},
         'meal':{1:'eat',2:'food',3:'ingredient'},
         'medical':{1:'surgeon'},
         'men':{1:'farmer'},
         'merry':{1:'laugh'},
         'mess':{1:'fill'},
         'mob':{1:'group'},
         'motion':{1:'jump'},
         'motorbike':{1:'motorcycle'},
         'motorcyclist':{1:'rider',2:'motorcycle'},
         'move':{1:'squirt',2:'rollerblade',3:'haul',4:'cross'},
         'muddy':{1:'mud'},
         'multiple':{1:'four'},
         'music':{1:'sing',2:'guitar',3:'cello',4:'musical',5:'orchestra',6:'drum',7:'instrument',8:'headphones'},
         'musician':{1:'music',2:'drum'},
         'mouth':{1:'chew'},
         'near':{1:'lead',2:'front'},
         'nearby':{1:'next'},
         'next':{1:'foreground'},
         'object': {1:'toy',2:'food',3:'ball',4:'something',5:'gavel'},
         'observe':{1:'look'},
         'old':{1:'elderly'},
         'operate':{1:'fill',2:'tear'},
         'oppose':{1:'defensive'},
         'oriental':{1:'asian'},
         'outdoor':{1:'outside',2:'city',3:'street',4:'hillside',5:'countryside',6:'sun',7:'fountain',8:'wood',9:'ground',10:'sidewalk',11:'terrain',12:'path',
                    13:'mountain',14:'ocean',15:'amusement',16:'park',17:'plant',18:'beach',19:'meadow',20:'stream',21:'field',22:'water',23:'tree',24:'hill',
                    25:'area',26:'nature',27:'mountainside',28:'rock',29:'wave',30:'pond',31:'forest',32:'river',33:'coast',34:'surf',35:'grass',36:'carnival'},
         'outfit':{1:'costume'},
         'outside':{1:'away',2:'mountain',3:'sidewalk',4:'ground',5:'takeoff',6:'building',7:'street',8:'doorway',9:'road',10:'hill',
                    11:'parking',12:'tree',13:'front',14:'water',15:'hillside',16:'field',17:'ocean',18:'park',19:'playground',20:'city',
                    21:'fence',22:'track',23:'area',24:'patio',25:'air',26:'yard',27:'forest',28:'trail',29:'grass',30:'post',31:"set",
                    32:'fountain',33:'sun',34:'bridge',35:'river',36:'dock',37:'overpass',38:'lawn',39:'walkway',40:'beach',41:'pavement',42:'path',
                    43:'skyline',44:'sand',45:'snow',46:'top',47:'stair',
                    48:'lake',49:'jungle',50:'pond'},
         'oven':{1:'bake'},
         'painter':{1:'man'},
         'pair':{1:'they'},
         'paper':{1:'origami'},
         'partially':{1:'half'},
         'pant':{1:'slack'},
         'paper':{1:'paperwork'},
         'peace':{1:'peacefully'},
         'pedestrian':{1:'walk'},
         'perform':{1:'do',2:'demonstrate'},
         'performance':{1:'perform'},
         'person': {1: 'senior', 2: 'monk',3:'people',4:'performer',5:'rider',6:'guy',7:'opponent',8:'goalie',9:'surfer',10:'member',12:'girl',13:'gentlemen',
                    14:'boy',15:'human',16:'he',17:'woman',18:'player',19:'driver',20:'they',21:'biker',22:'musician'},
         'people': {1:'group',2:'man',3:'woman',4:'player',5:'couple',6:'woman',7:'person',8:'man',9:'dancer',10:'human',11:'crowd',
                    12:'player',13:'runner',14:'girl',15:'boy',16:'surfer',17:'team',18:'guy',19:'adult',20:'attendant',21:'they',
                    22:'worker',23:'batsman',24:'pedestrian',25:'tourist',26:'racer',27:'teenager',28:'african',29:'biker',30:'individual',31:'vendor',
                    32:'teacher',33:'motorcyclist',34:'performer',35:'adult',36:'villager',37:'soloist',38:'male',39:'female',40:'entertainer',
                    41:'member',42:'hiker'},
##         'people':{1:'man',2:'couple',3:'woman',4:'runner',5:'crowd',6:"human",7:'player'},
         'pet':{1:'dog'},
         'photo':{1:'photos'},
         'photograph':{1:'camera',2:'picture'},
         'photographer':{1:'man',2:'picture'},
         'phone':{1:'cellphone',2:'smartphone'},
         'picture': {1:'image',2:'camera'},
         'pile':{1:'load'},
         'play': {1:'jump',2: 'slide',3:'score',4:'racket',5:'frolick',6:'enjoy',7:'splash',8:'wade',9:'kick',10:'blow',11:'player',12:'toy',13:'leap'},
         'player':{1:'football',2:'play'},
         'pleasure':{1:'enjoy'},
         'practice':{1:'rehearse',2:"prepares"},#,2:'work'},
         'prep':{1:'mix'},
         'prepare': {1:'pose',2:'clean'},
         'professional':{1:'chef'},
         'progress':{1:'compete'},
         'puppeteer':{1:'puppet'},
         'racket':{1:'tennis'},
         'rain':{1:'umbrella',2:'rainy'},
         'raise':{1:'air',2:'hold'},
         'rear':{1:'rearing'},
         'receive':{1:'hand'},
         'record':{1:'videotape'},
         'reference':{1:'read'},
         'relax':{1:'lay',2:'lounge'},
         'remove':{1:'scrap'},
         'research':{1:'researcher'},
         'ride':{1:'pass',2:'rodeo',3:'rider',4:'maneuver'},
         'road':{1:'street',2:'sidewalk',3:'ride'},
         'rollerskate':{1:'skate'},
         'roof':{1:'rooftop'},
         'room':{1:'apartment'},
         'run':{1:'pass',2:'chase',3:'track',4:'bound'},
         'scarf':{1:'headscarf'},
         'scientific':{1:'science'},
         'scope':{1:"microscope"},
         'seaside': {1: 'ocean'},
         'secure':{1:'protective'},
         'selfies':{1:'picture'},
         'several':{1:'group'},
         'share':{1:'eat'},
         'shirt': {1: 't-shirt'},
         'shop':{1:'shopping'},
         'show':{1:'hold'},
         'side':{1:'left'},
         'sing':{1:'singing',2:'perform'},
         'singer':{1:'sing'},
         'single':{1:'lone'},
         'sit':{1:'lap',2:'relax'},
         
         'site':{1:'zone',2:'construction'},
         'situate':{1:'stand'},
         'skate':{1:'rollerskate'},
         'skateboarder':{1:'skateboard'},
         'ski':{1:'skis'},
         'slack':{1:'pant'},
         'sled':{1:'slide'},
         'small':{1:'tiny',2:'young'},
         'smile':{1:'delight'},
         'snow':{1:'snowy'},
         'snowboarder':{1:'snowboard'},
         'soccer':{1:'goal'},
         'soldier':{1:'commandos'},
         'somebody':{1:'man'},
         'someone':{1:'cyclist',2:'girl',3:'woman',4:'patient'},
         'song':{1:'guitar',2:'sitar',3:'violin',4:'musical',5:'karaoke'},
         
         'speak':{1:'conversation'},
         'spectator':{1:'group'},
         'sport':{1:'rugby',2:'basketball',3:'soccer',4:'baseball',5:'ball',6:'tennis',7:'hockey'},
         'stadium':{1:'game'}, 
         'stair':{1:'stairs'},
         'stand':{1:'wait'},
         'starry':{1:'star'},
         'station':{1:'entrance'},
         'stone':{1:'cobblestone'},
         'store':{1:'supermarket'},
         'street':{1:'intersection',2:'road'},
         'structure':{1:'wall'},
         'student':{1:'boy'},
         'study':{1:'watch'},
         'stuff':{1:'item',2:'equipment'},
         'stunt':{1:'trick'},
         'suit':{1:'costume'},
         'sunny':{1:'sunlight',2:'sun'},
         'surround':{1:'strew',2:'around',3:'lay',4:'covered',5:'line'},
         'swim':{1:'water',2:'bath',3:'pool'},
         'swimsuit':{1:'suit'},
         'talk':{1:'chat',2:'presentation'},
         'tall':{1:'taller'},
         'teach':{1:'show'},
         'team':{1:'boy',2:'man'},
         'teeball':{1:'baseball'},
         'teen':{1:'girl',2:'boy'},
         'thing':{1:'art',2:'item',3: 'cellphone',4:'baton',5:'glass'},
         'tickle':{1:'play'},
         'together':{1:'unison'},
         'tool':{1:'saw',2:'scissor',3:'hammer'},
         'toothbrush':{1:'tooth'},
         'top':{1:'roof'},
         'topless':{1:'shirtless'},
         'toy':{1:'frisbee',2:'present',3:'barbie',4:'rubber'},
         'towards':{1:'toward'},
         'trap':{1:'lock'},
         'trash':{1:'trashcan'},
         'tree':{1:'forest'},
         'try':{1:'attempt'},
         'transportation':{1:'ride'},
         'travel':{1:'walk',2:'foot'},
         'trek':{1:'treks'},
         'trick':{1:'flip'},
         #'two':{1:'anoth'},
         'upright':{1:'stand'},
         'upset':{1:'cry'},
         'unhappy':{1:'crying'},
         'unhygenic':{1:'dirt'},
         'uniform':{1:'hat'},
         'use':{1:'assemble',2:'operate'},
         'vegetable':{1:'corn'},
         
         'vehicle':{1:'tractor',2:'boat',3:'motorcycle',4:'bike',5:'car',6:'jeep',7:'bus',8:'van',9:'rover',10:'crane'},
         'vendor':{1:'man',2:'sell'},
         'vocal':{1:'conversation'},
         'wait':{1:'seat'},
         'wander':{1:'walk'},
         'ware':{1:'harvest'},
         'warm':{1:'tropical'},
         'wash':{1:'washer'},
         'watch':{1:'glance',2:'observe',3:'inspect',4:'overlook',5:'show'},
         'water':{1:'dock',2:'navigate',3:'boat',4:'shore',5:'beach',6:'river',7:'mud'},
         'wear':{1:'drape'},
         'wet':{1:'lake',2:'pool'},
         'win':{1:'play'},
         'woman':{1:'person',2:'nun',3:'sister',4:'mother'},
         'wood':{1:'wooden'},
         'work': {1:'weave',2:'classwork',3:'maintenance',4:'build',5:'wash',6:'construction',7:'repair',8:'rake',9:'dump',10:'shovel'},
         'worker':{1:'work'},
         'workman':{1:'carpenter'},
         'workout':{1:'treadmill'},
         'worship':{1:'pray'},
         'wrestle':{1:'wrestler',2:'play'},
         'he':{1:'man'},
         'she':{1:'woman'},
         'they':{1:'people',2:'pair'}}      
         
  if i in dic.keys():

     val= dic[i] .values()
  if (val):   
    for p in val:
      if p in evi_sub:
        flag=1 
  return flag


def dic1_search_ant(i1,evi_sub):
  flag_dic_ant=0
  
  val1=[]
  dic1 = {'alone':{1:'group',2:'crowd'},
          'angry':{1:'goofy'},
          'asleep':{1:'stare',2:'run',3:'play'},
          'behind':{1:'front'},
          'desert':{1:'snow'},
          'dark':{1:'bright'},
          'dog':{1:'person',2:'people'},
##          'down':{1:'uphill'},
          'girl':{1:'man'},
          'ground':{1:'upward'},
          'hit':{1:'wave'},
          'indoor':{1:'field'},
          'inside':{1:'outdoor'},
          'lady':{1:'man'},
          'lay':{1:'run'},
          'man':{1:'child',2:'lady',3:'nun'},
          'normally':{1:'wildly'},
          'order':{1:'prepare'},
          'play':{1:'sit',2:'stand'},
          'race':{1:'ride'},
          'ride':{1:'run'},
          'run':{1:'sit',2:'stand',3:'walk'},
          'separately':{1:'together'},
          'sit':{1:'run',2:'walk',3:'swim',4:'ride'},
          'sleep':{1:'drink',2:'listen',3:'feed',4:'run',5:'ride'},
          'solo':{1:'together'},
          'still':{1:'move'},
          'swim':{1:'jump'},
          'teenager':{1:'child'},

          'walk':{1:'wait',2:'sit',3:'stand'},
          'woman':{1:'boy'}}

  if i1 in dic1.keys():

     val1= dic1[i1] .values()
  if (val1):   
    for p1 in val1:
      if p1 in evi_sub:
        flag_dic_ant=1 
  return flag_dic_ant

def score_wn(x,hyp_lem):
          ps = PorterStemmer()
##          # print("x n hyp_lem in score_wn:",x,hyp_lem)
          scor_wn=0.0
          fg=0
          mtc="Nil"
          for j in x:
##            if j=="outdoors":
##                j=ps.stem(j)
##            else:
##             # print ("j in score_wn",j)   
             if j in hyp_lem:
               mtc=j  
##               # print("j matched in score_wn:",mtc)
               scor_wn+=1.0
               fg=1
               
               break

          return scor_wn,mtc
        
              # # # # # # # print("scor_wn n j:,",j,scor_wn)    
##              return scor_wn,j   

#..... for finding whthr all words in evi in hyp...or synonym or hyponym match

def all_words(evi_lem,hyp_lem):
##    # print("evi lem1 n hyp_lem1 inside fn:",evi_lem,hyp_lem)
    score=0.0
    score1=0.0
    score2=0.0
    score3=0.0
    score4=0.0
    score5=0.0
    score6=0.0
    score_ant=0.0
    score_ant1=0.0
    sc=0.0
    art=["A","An","The","hi",",","In","light","'s","quickly","sever",'young','new',"12",'3',"one","two","three","four",'five','sheet',"mani","edge","near",
         "briskly","around","also","day"]
    match_words=[]
    for i in evi_lem:
      # print("i:",i)
      if i=="nobody":
          score_ant=-1
      if i in hyp_lem:

           score+=1.0
           # print("score&&&:",score)
           match_words.append(i)
      else :
          #sy,a=syn(i)
          
          x,y,hy,b,hypero,m,ho=wn_reln(i)
          
##          # print("hy",hy)
          score1,match_wd1=score_wn(x,hyp_lem)
##          # print("score1,match_wd1",score1,match_wd1,x)
          if match_wd1 in match_words:
               score1=0.0
          else:
              match_words.append(match_wd1)
          score2,match_wd2=score_wn(hy,hyp_lem)
##          # print("score2,match_wd2",score2,match_wd2,hy)
          if match_wd2 in match_words:
               score2=0.0
          else:
              match_words.append(match_wd2)

          score3,match_wd3=score_wn(hypero,hyp_lem)
##          # print("score3,match_wd3",score3,match_wd3,hypero)
          if match_wd3 in match_words:
               score3=0.0
          else:
              match_words.append(match_wd3)
          score4,match_wd4=score_wn(m,hyp_lem)
##          # print("score4,match_wd4",score4,match_wd4)
          if match_wd4 in match_words:
               score4=0.0
          else:
              match_words.append(match_wd4)
              
          score5,match_wd5=score_wn(ho,hyp_lem)
##          # print("score5,match_wd5 ho",score5,match_wd5,ho)
          if match_wd5 in match_words:
               score5=0.0
          else:
              match_words.append(match_wd5)
          score6,match_wd6=score_wn(b,hyp_lem)
##          # print("score6,match_wd6",score6,match_wd6)
          if match_wd6 in match_words:
               score6=0.0
          else:
              match_words.append(match_wd6)
              #......antonym case....
          score7,match_wd7=score_wn(y,hyp_lem)
##          # print("score7,match_wd7",score7,match_wd7)
##          # print("score7,match_wd7",score7,match_wd7)
          if match_wd7 in match_words:
               score7=0.0
          else:
              match_words.append(match_wd7)    
    
          sc=dic_search(i,hyp_lem)
          sc1=dic1_search_ant(i,hyp_lem)
          # # # # # print("score1,score2,score3",score1,score2,score3)
          if (score1>0):
              score=score1+score
              # # # # # # # print("inside score1:score",score)
          elif(score2>0):
##              # print("123123")
              score=score2+score
              # # # # # # # print("inside score2:score",score)
          elif (score3>0):
              score=score3+score
              # # # # # # # print("inside score3:score",score)
          elif (score4>0):
              score=score4+score
          elif (score5>0):
              score=score5+score
          elif (score6>0):
              score=score6+score
          

          elif (sc>0):
              
##               # # # # # # # print("sc:",sc)
               score=sc+score
          elif (sc1>0):
               score_ant1=-1
     
          else:     
                if i in art:
                   score+=1.0
##                   # print("score---:",score)
          if (score7>0):
##              # print("123")
              score_ant=-1                  
          # print("score,score1-7,sc",score,score1,score2,score3,score4,score5,score6,score7,sc)
    # # # # # # # print("total score n length:",score,len(evi_lem))        
    final_score= score/ (len(evi_lem))
    
    # # # # # # # print("final_score inside fn:",final_score)
    return final_score, match_words,score_ant,score_ant1

    



#....checking whether wi present in H...
      
def matching(x,y,hy,b,hypero,evi_sub):
        flag_syn=0
        flag_hyp=0
        flag_ent=0
        flag_ant=0
        flag_hyper=0
        flag_m=0
        flag_ho=0
        for j in x: 
           if j in evi_sub:
              flag_syn=1
        for u in y: 
           if u in evi_sub:
              flag_ant=1    
        for t in hy: 
           if t in evi_sub:
              flag_hyp=1
        for t1 in hypero: 
           if t1 in evi_sub:
              flag_hyper=1      
        for c in b: 
           if c in evi_sub:
              flag_ent=1
        for t2 in m: 
           if t2 in evi_sub:
              flag_m=1
        for t3 in ho: 
           if t3 in evi_sub:
              flag_ho=1       
        return flag_syn,flag_hyp,flag_ent,flag_hyper,flag_m,flag_ho,flag_ant
      
###.............matching sub,ver,obj.......
##  
##def svo_match(hyp_sub,evi_sub):
##    flag_sub=0
##    count=0
####    flag_ver=0
##    if not hyp_sub:
##      flag_sub=2
##    if not evi_sub:
##      flag_sub=2
##    for i in hyp_sub:
##       if i in evi_sub:
##           flag_sub=1
##           count+=1
####           # # # # # # # # print("flag@:",flag_sub)    
##       else:
##         x,y,hy,b,hypero =wn_reln(i)
####         # # # # # # # print("wn reln of word ",i,":",x,y,hy,b,hypero )
##         f1,f2,f3,f4,f5=matching(x,y,hy,b,hypero,evi_sub)
####         # # # # # # # # print("f4 flag:",f4)
##         if (f1 or f2 or f3 or f4==1) :
##              flag_sub=1
##         else:
##             fl=dic_search(i,evi_sub)
##             if fl==1:
##                 flag_sub=1             
##             
####              # # # # # # # # print("flag:",flag_sub)   
##         if f5==1:
##             flag_sub=-1
##    return flag_sub


#.............matching sub,ver,obj.......
  
def svo_match(hyp_sub1,evi_sub1):
    # print("hyp_sub1,evi_sub1:",hyp_sub1,evi_sub1)
    # # # # # print("hyp1,evi1:",hyp_sub1,evi_sub1)
    flag_sub=0
    count=0
    cnt1=0
    cnt2=0
    cnt3=0
    cnt4=0
    cnt5=0
    cnt6=0
    cnt7=0
    cnt8=0
##    flag_ver=0
##    hyp_sub=[]
##    evi_sub=[]
##    for i in hyp_sub1:
##      hyp_sub.append(i.lower())
##    for j in evi_sub1:  
##      evi_sub.append(j.lower())
##    # # print("hyp,evi+_+_+:",hyp_sub,evi_sub)
    if ((not hyp_sub1) and ( not evi_sub1)):
      flag_sub=2
    if ((not hyp_sub1) and (evi_sub1)):
      flag_sub=3
    if (( hyp_sub1) and (not evi_sub1)):
      flag_sub=4
      
    for i in evi_sub1:
##      # print("evi_i:",i)  
      for j in hyp_sub1:
##        # print("evi_j:",j)    
        if i== j:
           #flag_sub=1
           count=1
##           # print("count inside:",i,count)    
        else:
         # # # # # print("i inside svo_match fn:",i)
          x,y,hy,b,hypero,m,ho =wn_reln(i)
         
          if x:
##           # # # # # print("x inside svo_match:",x)
             cnt1,m_wd=score_wn(x,hyp_sub1)
##             # print("svo_match cnt1,m_wd:",cnt1,m_wd)
          if hy:  
##           # # # # # print("hy inside svo_match:",hy)
            cnt2,m_wd=score_wn(hy,hyp_sub1)
##            # print("svo_match cnt2,m_wd:",cnt2,m_wd)
          if hypero:  
##           # # # # # print("hypero inside svo_match:",hypero)
            cnt3,m_wd=score_wn(hypero,hyp_sub1)
##            # print("svo_match cnt3,m_wd:",cnt3,m_wd)
          if m:  
##           # # # # # print("hypero inside svo_match:",hypero)
            cnt4,m_wd=score_wn(m,hyp_sub1)
          if ho:  
##           # # # # # print("hypero inside svo_match:",hypero)
            cnt5,m_wd=score_wn(ho,hyp_sub1)
          if b:  
##           # # # # # print("hypero inside svo_match:",hypero)
            cnt6,m_wd=score_wn(b,hyp_sub1)
 
         # # # # # print("svo_match cnt-4:",cnt4)
          if y:
##           # # # # # print("y inside svo_match:",y)
            cnt8,m_wd=score_wn(y,hyp_sub1)
            # print("svo_match cnt8,m_wd:",cnt8,m_wd)
          cnt7=dic_search(i,hyp_sub1)
##          # print("cnt7:",cnt7)    
        # print("count1-8:",count,cnt1,cnt2,cnt3,cnt4,cnt5,cnt6,cnt7,cnt8 )
##         f1,f2,f3,f4,f5=matching(x,y,hy,b,hypero,evi_sub)
##         # # # # # # # # print("f4 flag:",f4)
        if(count==1 or cnt1==1 or cnt2==1 or cnt3==1 or cnt4==1 or cnt5==1 or cnt6==1 or cnt7 ==1):

              flag_sub=1
##              # print("flag_sub:",flag_sub)

    flag_sub1=0          
    if (flag_sub==1 and cnt8==1)  :
##           # print(11)
           flag_sub1=1
    if cnt8==1:
##             # print("count 8",i,cnt8)
             flag_sub=-1
##    # # # # # # # print("++++++++++++++++++++++++++++++++++++++++++++++++")
    if (flag_sub1==1):
##       # print("flag_sub1:",flag_sub1) 
         return flag_sub1
       
    else:
##          # print("flag_sub inside fn:",flag_sub) 
          return flag_sub
#.............matching nmod reln.......modify code
  
def nmod_match(hyp_nmod1,evi_nmod1):
    # # # # # # print("hyp_nmod1,evi_nmod1:",hyp_nmod1,evi_nmod1)
    flag_nmod=0
    count=0
    cnt1=0
    cnt2=0
    cnt3=0
    cnt4=0
    cnt5=0
##    flag_ver=0
    hyp_nmod=[]
    evi_nmod=[]
    if(hyp_nmod1):
      hyp_nmod.append(hyp_nmod1[0])
    if(evi_nmod1):  
      evi_nmod.append(evi_nmod1[0])
    # # # # # # print("hyp_nmod,evi_nmod:",hyp_nmod,evi_nmod)
    if not hyp_nmod:
      flag_nmod=2
    if not evi_nmod:
      flag_nmod=2
    for i in evi_nmod:
       if i in hyp_nmod:
           #flag_sub=1
           count+=1
##           # # # # # # # print("count inside:",count)    
       else:
         x,y,hy,b,hypero,m,ho =wn_reln(i)
         cnt1,m_wd=score_wn(x,hyp_nmod)
         cnt2,m_wd=score_wn(hy,hyp_nmod)
         cnt3,m_wd=score_wn(hypero,hyp_nmod)
         cnt4,m_wd=score_wn(m,hyp_nmod)
         cnt5,m_wd=score_wn(ho,hyp_nmod)
         cnt6,m_wd=score_wn(b,hyp_nmod)
         cnt7=dic_search(i,hyp_nmod)
         cnt8,m_wd=score_wn(y,hyp_nmod)
         
##         # # # # # # # print("count1-5:",cnt1,cnt2,cnt3,cnt4,cnt5 )
##         f1,f2,f3,f4,f5=matching(x,y,hy,b,hypero,evi_sub)
##         # # # # # # # # print("f4 flag:",f4)
##         count=cnt1+cnt2+cnt3+cnt4
       cn=len(evi_nmod)
##       # # # # # # # print("total count n len(evi_sub):",count,cn)
       if(count==cn):
##         if (fz1 or fz2 or fz3 ) :
              flag_nmod=1
##         else:
##             fl=dic_search(i,evi_sub)
##             if fl==1:
##                 flag_sub=1             
             
##              # # # # # # # # print("flag:",flag_sub)   
       if cnt8==1:
             flag_nmod=-1
##    # # # # # # # print("++++++++++++++++++++++++++++++++++++++++++++++++")
    return flag_nmod

  



#............for matching amod relation....for same object n color..

def colour(hyp_color_mod,evi_color_mod,color):
     col=0
##   if evi_obj==hyp_obj:
     for i in evi_color_mod:
        #if i in color:
          for j in hyp_color_mod:
         #   if j in color:
              if i!=j:
                 col=-1
     return col   

#...negation detection...
 
def neg_detect(neg,ver,pos_lst,ver1,obj1,f_obj1):
    nnform=['NNS','NNPS','NN','NNP']
    fl_neg=0
    neg1=[]
    # print("neg n ver,ver1:",neg,ver,ver1)
    w5_pos=extract_pos(pos_lst,neg[0])
    # print("w5_pos",w5_pos,neg[0])
    if (w5_pos=="VBG"):
                w5=stm_vbg(neg[0])
                neg1.append(w5)
    elif(w5_pos in pp):
                w5=stm_vbd(neg[0])
                neg1.append(w5)
    elif(w5_pos in ps):
                w5=stm_vbz(neg[0])
                neg1.append(w5)
    elif(w5_pos=="VB") :
                w5=(neg[0].lower())
                neg1.append(w5)
##                # print("w5:",w5)

    else:                  # (w5_pos=="NN")
         w5=(neg[0].lower())
         neg1.append(w5)

         if w5==None:
                    w5=neg[0].lower()
      
         if w5 not in neg1:
                   neg1.append(w5)
    # print("neg1:",neg1)
    
    #...subj negative case..
    
    if (neg1[0] not in ver ):
        for i in ver1:
##            # print("i",i)
            neg1.append(i)
##        if neg1[0] in ver1:
            
##    for i in neg1:
##    # print("neg1 in:",neg1)
    for i in neg1:
      if i in ver:
##            # print(11)
            fl_neg=1
      else:
          if i in obj1 or (f_obj1==1):
              fl_neg=1
##    # print("neg n flg",neg1,fl_neg)
    return fl_neg        
##...nummod match.....

def nummod_match(hyp_nummod,evi_nummod):
    fl_nummod=0
    if hyp_nummod!=evi_nummod:
        fl_nummod=1
    return fl_nummod    

#-----comparison of different flags...syntactic score...
  
def score_calc(flag_s,flag_v,flag_o,flag_det,flag_aux,flag_mod,flag_mark,flag_advcl,flag_admod,flag_num,flag_comp):
    synt_score=0.0
    if (flag_s==flag_v==flag_o==1):
         synt_score+=1.0
         
    elif (flag_s==1):
         synt_score+=0.5
    elif (flag_o == flag_v==1):
         synt_score+=0.5
    elif ((f1==flag_v==1)or(f2==flag_v==1)):
         synt_score+=0.5
    if (flag_det==1):
         synt_score+=1.0
    if (flag_aux==1):
         synt_score+=1.0     
    if (flag_mod==1):
         synt_score+=0.5    
    if (flag_mark==1):
         synt_score+=1.0
    if (flag_advcl==1):
         synt_score+=1.0     
    if (flag_admod==1):
         synt_score+=1.0
    if (flag_num==1):
         synt_score+=1.0     
    if (flag_comp==1):
         synt_score+=1.0    
    return synt_score


d1=[]
d2=[]
d3=[]
##from nltk.stem.wordnet import WordNetLemmatizer
##incor_sent=[]
##for p in range(len(hyp_sample)):
##   if (lab_cor_sample[p]=='yes'):
##    hyp_sen1=hyp_sample[p]
##    # # # # # # # print("hyp::",hyp_sen)
##    #------------tokens,stop word ,punctuation removal,lemmatize....
##    lm = WordNetLemmatizer()
##    ps = PorterStemmer()
##    hyp_tok=[]
##    hyp_tok1=[]
##   
##    
##    hyp_sen2=hyp_sen1.split("-")
##    hyp_sen= " " .join(hyp_sen2)
##    hyp_input_sen=hyp_sen
##    hyp_tk=word_tokenize(hyp_input_sen.lower())
##    hyp_tok1=pos_tag(word_tokenize(hyp_input_sen))
##    ps=['VBZ','WRB','VBP']
##    pp=['VBD','VBN']
##    nn=['NNS','NNPS']
##    nn_exclude=["building","ceiling","king","ping","ring","singer","something",'spring',"thing","wing"]
##    for i in range(len(hyp_tok1)):
##      if (hyp_tok1[i][1] in nn):
##          x=stm_nns(hyp_tok1[i][0].lower())
##          if x==None:
##                  x=hyp_tok1[i][0].lower()
##
##          hyp_tok.append(x)
####          # print (x)
##      elif (hyp_tok1[i][1]=='VBG'):
##        x=stm_vbg(hyp_tok1[i][0].lower())
##        if x==None:
##                  x=hyp_tok1[i][0].lower()
##
##        hyp_tok.append(x)
####        # print (x)
##      elif (hyp_tok1[i][1] in ps):
##        x=stm_vbz(hyp_tok1[i][0].lower())
##        if x==None:
##                  x=hyp_tok1[i][0].lower()
##        hyp_tok.append(x)
####        # print (x)
##      elif (hyp_tok1[i][1] in pp):
##        x=stm_vbd(hyp_tok1[i][0].lower())
##        if x==None:
##                  x=hyp_tok1[i][0].lower()
##        hyp_tok.append(x)
####        # print (x)
##      elif (hyp_tok1[i][1] =="NN" and re.search("ing",hyp_tok1[i][0]) and (hyp_tok1[i][0] not in nn_exclude)):
##            x=stm_vbg(hyp_tok1[i][0])
##            if x==None:
##                x=hyp_tok1[i][0].lower()
##            hyp_tok.append(x)
##      else:
##        
##        x=hyp_tok1[i][0].lower()
##        hyp_tok.append(x)
##    hyp_filt_sent=stop_wd(hyp_tok)
##    hyp_lem1=elim_pun(hyp_filt_sent)
##
##
##
##    
##   #---------------------parsing
##    
####    # # print("hyp_sent:@@@@@@@@222",hyp_sen)  
##    hyp_triples,hyp_pos=extract_triples(hyp_sen)
####    hyp_subnmod1,hyp_vernmod1,hyp_objnmod1=extract_parts_nmod(hyp_triples,hyp_sub1,hyp_ver1,hyp_obj1)
####    # print("hyp_triples:",hyp_triples)
##    for i in range(len(hyp_triples)):
##        if hyp_triples[i][2]=='cop':
####            # print(11)
##            hyp_sub1,hyp_ver1,hyp_obj1,h_sub1,h_ver1,h_obj1=extract_cop(hyp_triples,hyp_pos)
##            hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_subnmod,hyp_vernmod,hyp_objnmod=extract_parts_nmod(hyp_triples,hyp_obj1,hyp_ver1,hyp_sub1,hyp_pos)
##            break 
####            else:
##        elif hyp_triples[i][2]=='nsubjpass':
####               # print(22)
##            #.....code taking nsubjpass as sub....
##            
##               hyp_sub1,hyp_ver1,hyp_obj1,h_sub1,h_ver1,h_obj1=extract_pass(hyp_triples,hyp_pos)
##               if (hyp_obj1==[]):
####               h_obj1=[]
##                 hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_subnmod,hyp_vernmod,hyp_objnmod=extract_parts_nmod(hyp_triples,h_obj1,h_ver1,h_sub1,hyp_pos)
##                 if(hyp_vernmod1): 
####                  hyp_sub1.append(hyp_vernmod1[0])
##                    h_obj1.append(hyp_vernmod1[0])
##                    w_pos=extract_pos(hyp_pos,hyp_vernmod1[0])
####                  # print("w_pos",w_pos,triples[i][1] )
##                    if w_pos=="NNS" or "NNPS":
##                      w=stm_nns(hyp_vernmod1[0])
##                    elif w_pos=="NN":
##                        w=hyp_vernmod1[0].lower()
####                  # print("w:",w)
##                    if w==None:
##                         w=hyp_vernmod1[0].lower()
##                    if w not in hyp_obj1:
##             
##                            hyp_obj1.append(w)
####                  # print("passive hyp obj:",hyp_obj1,h_obj1)   
##               hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_subnmod,hyp_vernmod,hyp_objnmod=extract_parts_nmod(hyp_triples,h_obj1,h_ver1,h_sub1,hyp_pos)
##                  
##                  
##               break    
####            else:
##        elif (hyp_triples[i][2]=='nsubj' or hyp_triples[i][2]=='acl'):
####                # print(33) 
####                z=0  
##                hyp_sub1,hyp_ver1,hyp_obj1,h_sub1,h_ver1,h_obj1=extract_parts_svo(hyp_triples,hyp_pos)
####                # print("hyp_ver1:",hyp_ver1)
####                z=z+1
##                hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_subnmod,hyp_vernmod,hyp_objnmod=extract_parts_nmod(hyp_triples,h_obj1,h_ver1,h_sub1,hyp_pos)
##                break
##        else:
##            hyp_sub1=[]
##            h_sub1=[]
##            hyp_ver1=[]
##            h_ver1=[]
##            hyp_obj1=[]
##            h_obj1=[]
##            hyp_subnmod1=[]
##            hyp_vernmod1=[]
##            hyp_objnmod1=[]
##            
##    if (hyp_sub1==hyp_ver1==hyp_obj1==[]):        
####       # print("p value hyp_sen:",p)
##       incor_sent.append(p)
##    animal=["dog","cat","horse","cow","elephant"]
##    costum=['shirt','costume','dress','skirt','suit','coat','outfit','jersey','top','pants','suits','jacket','trunk','hoodie','sweatshirt','bathrobe','clothing','sandal']
##    if((hyp_sub1) and (hyp_subnmod1)):
##        for i in hyp_subnmod1:
##          if (i in costum):
##               hyp_st=in_correction(h_sub1,hyp_tk)
##               hyp_triples,hyp_pos=extract_triples(hyp_st)
####               # print("hyp_triples:",hyp_triples)
##               hyp_tok_new=[]
##               hyp_tok11=pos_tag(word_tokenize(hyp_st))
##               ps=['VBZ','VBP','WRB']
##               pp=['VBD','VBN']
##               for i in range(len(hyp_tok11)):
##                  if (hyp_tok11[i][1] in nn):
##                     x=stm_nns(hyp_tok11[i][0].lower())
##                     if x==None:
##                         x=hyp_tok11[i][0].lower()
##                     hyp_tok_new.append(x)
####                     # print (x)
##                  elif (hyp_tok11[i][1]=='VBG'):
##                     x=stm_vbg(hyp_tok11[i][0].lower())
##                     if x==None:
##                         x=hyp_tok11[i][0].lower()
##                     hyp_tok_new.append(x)
####                     # print (x)
##                  elif (hyp_tok11[i][1] in ps):
####                     # print("wrb")
##                     x=stm_vbz(hyp_tok11[i][0].lower())
##                     if x==None:
##                           x=hyp_tok11[i][0].lower()
##                     hyp_tok_new.append(x)
####                     # print (x)
##                  elif (hyp_tok11[i][1] in pp):
##                    x=stm_vbd(hyp_tok11[i][0].lower())
##                    if x==None:
##                        x=hyp_tok11[i][0].lower()
##                    hyp_tok_new.append(x)
####                    # print (x)
##                  elif (hyp_tok11[i][1] =="NN" and re.search("ing",hyp_tok11[i][0])and (hyp_tok11[i][0] not in nn_exclude)):
##                      x=stm_vbg(hyp_tok11[i][0])
##                      if x==None:
##                         x=hyp_tok11[i][0].lower()
##                      hyp_tok_new.append(x)
##                  else:
##        
##                     x=hyp_tok11[i][0].lower()
##                     hyp_tok_new.append(x)
####                     # print (x)
##
##               
##               hyp_filt_sent1=stop_wd(hyp_tok_new)
##               hyp_lem1=elim_pun(hyp_filt_sent1)
##    # # # # # print("hyp_lem1:",hyp_lem1)
##
##    
##               hyp_sub1,hyp_ver1,hyp_obj1,h_sub1,h_ver1,h_obj1=extract_parts_svo(hyp_triples,hyp_pos)
####               # # print("1111111111111111111111111")
##
##               hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_subnmod,hyp_vernmod,hyp_objnmod=extract_parts_nmod(hyp_triples,h_obj1,h_ver1,h_sub1,hyp_pos)
####               # # print("222222222222222222222222222222") 
##    hyp_color_amod,hyp_mod=extract_parts_mod(hyp_triples,hyp_obj1,hyp_pos,hyp_subnmod1,hyp_vernmod1)
####    # # print("3333333333333333333333333333333333333")
##    hyp_mark,hyp_advcl,hyp_advmod,hyp_neg,hyp_prt=extract_parts_other(hyp_triples,hyp_pos)
##
##    hyp_subcomp,hyp_objcomp,hyp_sncomp,hyp_vncomp,hyp_oncomp=extract_parts_comp(hyp_triples,h_obj1,h_ver1,h_sub1,hyp_subnmod1,hyp_vernmod1,hyp_objnmod1,hyp_pos)
##    hyp_subnum,hyp_objnum=extract_parts_num(hyp_triples,h_obj1,h_sub1,hyp_pos)
##    hyp_subconj,hyp_objconj=extract_parts_conj(hyp_triples,h_obj1,h_sub1,hyp_pos)
##
##    for i in hyp_subconj:
##        hyp_sub1.append(i)
##    for i in hyp_objconj:
##        hyp_obj1.append(i)
##    
##    for i in hyp_subcomp:
##        hyp_sub1.append(i)
##    for i in hyp_objcomp:
##        hyp_obj1.append(i)
##
##    h_ver1=is_convert(h_ver1)
##
##    gr=["group","bunch","pair"]
##    for i in h_sub1:
##      if i in gr:
##         if(hyp_subnmod1):
##            hyp_sub1.append(hyp_subnmod1[0])
##
##    lmtzr = WordNetLemmatizer()
##    evi_tok=[]
##    evi_sen1=evi_sample[p]
##    # # # # # # # print("evi::",evi_sen)
##    
##    evi_sen2=evi_sen1.split("-")
##    evi_sen= " " . join(evi_sen2)
##    evi_input_sen=evi_sen
##    evi_tk=word_tokenize(evi_input_sen.lower())
##    evi_tok1=pos_tag(word_tokenize(evi_input_sen))
##
##    ps=['VBZ','VBP','WRB']
##    pp=['VBD','VBN']
##    nn=['NNS','NNPS']
##    for i in range(len(evi_tok1)):
##      if (evi_tok1[i][1] in nn):
##          x=stm_nns(evi_tok1[i][0].lower())
##          if x==None:
##                  x=evi_tok1[i][0].lower()
##          evi_tok.append(x)
####          # print (evi_tok[i][0],x)
##      elif (evi_tok1[i][1]=='VBG'):
##        x=stm_vbg(evi_tok1[i][0].lower())
##        if x==None:
##                  x=evi_tok1[i][0].lower()
##        evi_tok.append(x)
####        # print (evi_tok[i][0],x)
##      elif (evi_tok1[i][1] in ps):
##        x=stm_vbz(evi_tok1[i][0].lower())
##        if x==None:
##                  x=evi_tok1[i][0].lower()
##        evi_tok.append(x)
####        # print (x)
##      elif (evi_tok1[i][1] in pp):
##        x=stm_vbd(evi_tok1[i][0].lower())
##        if x==None:
##                  x=evi_tok1[i][0].lower()
##        evi_tok.append(x)
####        # print (x)
##      elif (evi_tok1[i][1] =="NN" and re.search("ing",evi_tok1[i][0]) and (evi_tok1[i][0] not in nn_exclude)):
##         x=stm_vbg(evi_tok1[i][0])
##         if x==None:
##            x=evi_tok1[i][0].lower()
##         evi_tok.append(x)
##      else:
##        
##        x=evi_tok1[i][0].lower()
##        evi_tok.append(x)
##    evi_filt_sent=stop_wd(evi_tok)
##    evi_lem1=elim_pun(evi_filt_sent)
##
##    #---------------------parsing
##    evi_triples,evi_pos=extract_triples(evi_sen)
##    # # # # # # # print("evi_triples",evi_triples)
##    for i in range(len(evi_triples)):
##        if evi_triples[i][2]=='cop':
####            # print("11cop")
##            evi_sub1,evi_ver1,evi_obj1,e_sub1,e_ver1,e_obj1=extract_cop(evi_triples,evi_pos)
##            evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_subnmod,evi_vernmod,evi_objnmod=extract_parts_nmod(evi_triples,e_obj1,e_ver1,e_sub1,evi_pos)
##            break
####        else:
##        elif evi_triples[i][2]=='nsubjpass':
###.............taking nsubjpass as subj............
##               evi_sub1,evi_ver1,evi_obj1,e_sub1,e_ver1,e_obj1=extract_pass(evi_triples,evi_pos)
####               # print("passive:",evi_ver1,evi_obj1)
####               # # print("hyp_ver1 n obj1",hyp_ver1,hyp_obj1)
##               if(evi_obj1==[]):
####               e_obj1=[]
##                 evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_subnmod,evi_vernmod,evi_objnmod=extract_parts_nmod(evi_triples,e_obj1,e_ver1,e_sub1,evi_pos)
##                 if (evi_vernmod1):
####                   # print("evi_vernmod:",evi_vernmod1)
##                     e_obj1.append(evi_vernmod1[0]) 
##                     w_pos=extract_pos(evi_pos,evi_vernmod1[0])
####                  # print("w_pos",w_pos,triples[i][1] )
##                     if w_pos=="NNS" or "NNPS":
##                       w=stm_nns(evi_vernmod1[0])
##                     elif w_pos=="NN":
##                        w=evi_vernmod1[0].lower()
####                  # print("w:",w)
##                     if w==None:
##                         w=evi_vernmod1[0].lower()
##                     if w not in evi_obj1:
##             
##                            evi_obj1.append(w)
##
##                   
##               evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_subnmod,evi_vernmod,evi_objnmod=extract_parts_nmod(evi_triples,e_obj1,e_ver1,e_sub1,evi_pos)
##               break
####            else:
####              # print(77)  
##        elif ((evi_triples[i][2]=='nsubj')or (evi_triples[i][2]=='acl')):   
##                 evi_sub1,evi_ver1,evi_obj1,e_sub1,e_ver1,e_obj1=extract_parts_svo(evi_triples,evi_pos)
####                 # print("evi_ver1",evi_ver1)
##                 evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_subnmod,evi_vernmod,evi_objnmod=extract_parts_nmod(evi_triples,e_obj1,e_ver1,e_sub1,evi_pos)
##                 break
##        else:
##            evi_sub1=[]
##            e_sub1=[]
##            evi_ver1=[]
##            e_ver1=[]
##            evi_obj1=[]
##            e_obj1=[]
##            evi_subnmod1=[]
##            evi_vernmod1=[]
##            evi_objnmod1=[]
####            # print("p value evi_sen:",p)
####    incor_sent=[]        
##    if (evi_sub1==evi_ver1==evi_obj1==[]):        
####       # print("p value hyp_sen:",p)
##       incor_sent.append(p)
##     
##    costum=['shirt',"short",'costume','dress','skirt','suit','outfit','coat','jersey','top','pants','suits','jacket',
##            'trunk','hoodie','sweatshirt','bathrobe','clothing',"vest","tutu"]
##    if((evi_sub1) and (evi_subnmod1)):
####      # print("in_wear_evi")  
##      for i in evi_subnmod1:
##        if (i in costum):
##        
##        
##        
##        
##          evi_st=in_correction(e_sub1,evi_tk)
####          # print("in_wear converted sentence#########:", evi_st)
####    else:
####        evi_st=evi_sen
####    # # # # # print("evi_sent:",evi_st)    
##          evi_triples,evi_pos=extract_triples(evi_st)
##
##          evi_tok_new=[]
##          evi_tok11=pos_tag(word_tokenize(evi_st))
##
##          ps=['VBZ','VBP','WRB']
##          pp=['VBD','VBN']
##          for i in range(len(evi_tok11)):
##             if (evi_tok11[i][1] in nn):
##                x=stm_nns(evi_tok11[i][0].lower())
##                if x==None:
##                  x=evi_tok11[i][0].lower()
##                evi_tok_new.append(x)
####                # print (x)
##             elif (evi_tok11[i][1]=='VBG'):
##                x=stm_vbg(evi_tok11[i][0])
##                if x==None:
##                  x=evi_tok11[i][0].lower()
##                evi_tok_new.append(x)
####                # print (x)
##             elif (evi_tok11[i][1] in ps):
##                x=stm_vbz(evi_tok11[i][0].lower())
##                if x==None:
##                  x=evi_tok11[i][0].lower()
##                evi_tok_new.append(x)
####                # print (x)
##             elif (evi_tok11[i][1] in pp):
##                x=stm_vbd(evi_tok11[i][0].lower())
##                if x==None:
##                  x=evi_tok11[i][0].lower()
##                evi_tok_new.append(x)
####                # print (x)
##             elif (evi_tok11[i][1] =="NN" and re.search("ing",evi_tok11[i][0])and (evi_tok11[i][0] not in nn_exclude)):
##                 x=stm_vbg(evi_tok11[i][0])
##                 if x==None:
##                   x=evi_tok11[i][0].lower()
##                 evi_tok_new.append(x)
##             else:
##        
##                x=evi_tok11[i][0].lower()
##                evi_tok_new.append(x)
####                # print (x)
##
##
##          
##          evi_filt_sent1=stop_wd(evi_tok_new)
##          evi_lem1=elim_pun(evi_filt_sent1)
##    # # # # # print("evi_lem1:",evi_lem1)
##
##
##          evi_sub1,evi_ver1,evi_obj1,e_sub1,e_ver1,e_obj1=extract_parts_svo(evi_triples,evi_pos)
##          evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_subnmod,evi_vernmod,evi_objnmod=extract_parts_nmod(evi_triples,e_obj1,e_ver1,e_sub1,evi_pos)
##    evi_color_amod,evi_mod=extract_parts_mod(evi_triples,evi_obj1,evi_pos,evi_subnmod1,evi_vernmod1)
##    evi_subcomp,evi_objcomp,evi_sncomp,evi_vncomp,evi_oncomp=extract_parts_comp(evi_triples,e_obj1,e_ver1,e_sub1,evi_subnmod1,evi_vernmod1,evi_objnmod1,evi_pos)
##    evi_subnum,evi_objnum=extract_parts_num(evi_triples,e_obj1,e_sub1,evi_pos)
##    evi_subconj,evi_objconj=extract_parts_conj(evi_triples,e_obj1,e_sub1,evi_pos)
####    # print("4444444444444444444444444444444444444",evi_subnum,evi_objnum)
##    for i in evi_subcomp:
##        evi_sub1.append(i)
##    for i in evi_objcomp:
##        evi_obj1.append(i)
####    # print("evi_ver1",evi_ver1)
##    if "'s" in e_ver1:    
##       e_ver1.append("be") #is_convert(e_ver1)  
####    evi_ver1=e_ver1
##    # print("evi_ver1",evi_ver1)
##    evi_nmod=[]
##    if(evi_subnmod1):
##       evi_nmod.append(evi_subnmod1)
##    if(evi_vernmod1):
##        
##       evi_nmod.append(evi_vernmod1)
##    if(evi_objnmod1):
##       evi_nmod.append(evi_objnmod1)
##    # # # print("evi_nmod:",evi_nmod)
##    evi_mark,evi_advcl,evi_advmod,evi_neg,evi_prt=extract_parts_other(evi_triples,evi_pos)
####    # print("444444444444444444444444444444444444444444444444444",evi_neg)
##    col=0
##    if evi_color_amod:
##      col=colour(hyp_color_amod,evi_color_amod,colours)
##    if evi_mod:
##        
##      col=colour(hyp_mod,evi_mod,colours)
##      
##      # # # # # print("col:",col)
####    gr=["women","people","men"]
##    gr=["group","bunch","pair"]
##    for i in e_sub1:
##      if i in gr :
##          if (evi_subnmod1):
##             evi_sub1.append(evi_subnmod1[0])
##         
##            
##
##    # # # # # # # print ("evi_sub:", evi_sub)
##    match,c=triple_match(hyp_triples,evi_triples)
####    # print ("match",match)
##    syn_sim=sim_syn(hyp_triples,evi_triples)
##    
##    #extracting glove vector n calc dist of sub, ver,n obj...
##    
##    hyp_sub_gl=glov_vector(hyp_sub1)
####    # # # # # # # # print("hyp sub glove:",hyp_sub_gl)
##
##    evi_sub_gl=glov_vector(evi_sub1)
####    # # # # # # # # print("evi sub glove:",evi_sub_gl)
##
##    #calculating distance.....
##
##    d_sub_max,d_sub_min=sim(hyp_sub_gl,evi_sub_gl)
##    #d1.append(d_sub)
##
##    hyp_ver_gl=glov_vector(hyp_ver1)
####    # # # # # # # # print("hyp verb glove:",hyp_ver_gl)
##
##    evi_ver_gl=glov_vector(evi_ver1)
####    # # # # # # # # print("evi verb glove:",evi_ver_gl)
##
##    #calculating distance.....
##
##    d_ver_max,d_ver_min=sim(hyp_ver_gl,evi_ver_gl)
##    #d2.append(d_ver)
##
##    hyp_obj_gl=glov_vector(hyp_obj1)
####    # # # # # # # # print("hyp obj glove:",hyp_obj_gl)
##
##    evi_obj_gl=glov_vector(evi_obj1)
####    # # # # # # # # print("evi obj glove:",evi_obj_gl)
##
##    #calculating distance.....
##
##    d_obj_max,d_obj_min=sim(hyp_obj_gl,evi_obj_gl)
##    #d3.append(d_obj)
##
##    evi_lem11=[]
##    if lab_sample[p]=='entailment':
##      for i in evi_lem1:
##        if(( i=='wheeled')or(i== 'well')or (i=='else')or(i== "'s") or(i=='body')or(i=='already')or(i=='means') or (i=='follow')or(i=='ed')or(i=='onto')or
##           (i=='fur') or (i=='job') or (i=='`') or (i=='area')or(i=="kind") or (i=='yard')or(i=='dr')or(i=='rough')or(i=="might")or (i=='drip')or(i=='least')
##           or (i=="onward") or(i=="'") or (i=='along') or (i=='ben')or (i=="set") or  (i=="lot") or (i=="next") or(i=='``')or(i=="''")or (i==""") or (i==""")
##           or(i=='something')or(i=='together')or(i=="past")or(i=='somewhere')or(i=='another')or(i=='upon')or(i=="across")):
##            continue
##        else:
##            evi_lem11.append(i)
##      # # # print("evi_lem11:",evi_lem11)      
##      final_score,match_words,score_ant,score_ant1=all_words(evi_lem11,hyp_lem1)
##    else:
##        
##      final_score,match_words,score_ant,score_ant1=all_words(evi_lem1,hyp_lem1)
####.......match for sub,obj and verb etc.........
##    #...1 entail...-1 contradiction....0 neutral
##    
####    out=2
##    
##    flag_s=svo_match(hyp_sub1,evi_sub1)
####    # print("flag_s",flag_s)
##    flag_v=svo_match(hyp_ver1,evi_ver1)
##    flag_o=svo_match(hyp_obj1,evi_obj1)
##   #...cross check...sub n obj...
##    
##    flag_so=svo_match(hyp_sub1,evi_obj1)
##    flag_os=svo_match(hyp_obj1,evi_sub1)
##    # print("s_v_o cross flag:",flag_so,flag_os)
##
##    coup=["man","woman"]
####    # print("evi_sub1",evi_sub1)
##    if(evi_sub1[0]=='couple'):
####        # print("enter conj loop")
##        if(hyp_sub1[0] in coup):
##            if(hyp_subconj):
##               if (hyp_subconj[0] in coup):
####              # print("enter conj reln")
##                   flag_s=1
##                   
#############........added code for contradiction detection....############
##                   
##    #...working/running in kitchen 
##    fl_kit=0               
##    flag_ver_nmod=svo_match(hyp_vernmod1,evi_vernmod1)
##
##    if (flag_ver_nmod==1) and ("kitchen" in hyp_vernmod1):
##        
##        if "work" in hyp_ver1 and "run" in evi_ver1:
##            
##            fl_kit=1
##    flage_ver_nmod=svo_match(evi_obj1,hyp_vernmod1)
##    flagh_ver_nmod=svo_match(hyp_obj1,evi_vernmod1)
##
##    
##    # animal...ppl issue....
##    fl_anim=0
##    if (flag_s==0) and ("people" in hyp_sub1 ):
##        for i in evi_sub1:
##            if i in animal:
##                fl_anim=1
##
##    #car...bike..
##    fl_veh=0            
##    four_whl=["car","jeep"]
##    two_whl=["bike","scooter"]
##    if (flag_o==0):
##      for i in evi_obj1:            
##         if i in four_whl:
##             for j in hyp_obj1:
##                 if j in two_whl:
##                     fl_veh=1
##   #man..lady
##    if flag_s==0:
##        if ("man" in hyp_sub1) and ("lady" in evi_sub1):
##            flag_s=-1
##
##    #....negative detection...
##    
##    flg_nege=0
##    flg_negh=0
##    if (evi_neg):
##       flg_nege=neg_detect(evi_neg,hyp_ver1,evi_pos,evi_ver1,hyp_obj1,flag_o)
##    if(hyp_neg):
##       flg_negh=neg_detect(hyp_neg,evi_ver1,hyp_pos,hyp_ver1,evi_obj1,flag_o)
##
##    f_neg=0
##    if (flg_nege):# or 
##         f_neg=1
##    elif (flg_negh):
##        f_neg=1
##    else:
##        f_neg=0
##        
##        #...................number mismatch identification..
##        
##    f_subnum=nummod_match(hyp_subnum,evi_subnum)
##    f_objnum=nummod_match(hyp_objnum,evi_objnum)
##
##    
##    f_objnum1=nummod_match(hyp_objnmod,evi_objnmod)
##
##    if (f_subnum ==1 or f_objnum ==1 or f_objnum1==1):
##        f_num=1
##    else:
##        f_num=0
##    #. ..comp:prt negation..
##    fl_prt=0    
##    for i in evi_prt:    
##      x,y,hy,b,hypero,m,ho=wn_reln(i)
##      if y:
##        for j in y:  
##           if j in hyp_prt:
##               fl_prt=1
##
##    thr_c=0.4
##
##    thr_e=0.7
##    flag_nmod=0
##    outc2=0
##    outn2=0
##    oute2=0
##    outc1=0
##    oute1=0
##    outn1=0
##    if((flag_s==flag_v==flag_o==1) or (final_score==1) or (flag_s==flag_v==1 and flag_o==3 and flage_ver_nmod==1) ):#or (flag_s==flag_v==1 and flag_o==2 and flag_ver_nmod==1)): 
##        oute2=1
##    #if(oute1==0): 
##    if (flag_s==-1)or(flag_v==-1) or(flag_o==-1)  or (score_ant==-1) or  (score_ant1==-1)or (fl_anim ==1)or (fl_veh==1) or(fl_prt) or ((flag_v==0) and (d_ver_min<thr_c)) or ((flag_s== 0) and (d_sub_min<thr_c))or((flag_o== 0) and (d_obj_min<thr_c)) or (col==-1) or (f_neg==1) or (f_num==1) or (fl_kit==1)or ((flag_s==flag_v==1) and(flag_ver_nmod==0))or (syn_sim<0.2):
##         outc2=1
##    else :    
##        outn2=1  
##
##
##                    
###.....writing result to file(CSV)....
##    ## # # # # # # # print("lab[p]:",lab[p])  
##    csvData=[[p,lab_sample[p],oute2,outc2,outn2]]
##    with open('aug11_exp2_1k.csv', 'a') as csvFile:
##       writer = csv.writer(csvFile)
##       writer.writerows(csvData)
##
##    csvFile.close()           
##
